{
  "version": 3,
  "sources": ["../../../../../../../Users/ted/.yarn/berry/cache/@bangle.io-config-template-npm-0.0.7-950b90700c-10c0.zip/node_modules/@bangle.io/config-template/src/index.ts"],
  "sourcesContent": ["const buildFields = [\n  \"appEnv\",\n  \"buildTime\",\n  \"commitHash\",\n  \"deployBranch\",\n  \"hot\",\n  \"netlifyBuildContext\",\n  \"nodeEnv\",\n  \"releaseId\",\n  \"releaseVersion\",\n  \"storybook\",\n];\n\nexport interface FinalConfig {\n  build: RawBuildConfig;\n  app: RawAppConfig;\n  debug: RawDebugConfig | undefined;\n}\n\nexport interface RawBuildConfig {\n  readonly appEnv: string;\n  readonly buildTime: string;\n  readonly commitHash: string;\n  readonly deployBranch: string;\n  readonly hot: boolean;\n  readonly netlifyBuildContext: string;\n  readonly nodeEnv: string;\n  readonly releaseId: string;\n  readonly releaseVersion: string;\n  readonly storybook: boolean;\n}\n\nconst requiredAppFields = [\"helpDocsVersion\", \"changelogText\"];\nexport interface RawAppConfig {\n  helpDocsVersion: string;\n  changelogText: string;\n}\n\nconst debugFields = [\"writeSlowDown\"];\nexport interface RawDebugConfig {\n  writeSlowDown: number;\n}\n\nfunction checkObject<T>(object: T, fields: string[], objectName: string) {\n  if (Object.keys(object).length !== fields.length) {\n    const missingKey = fields.find((field) => !(field in object));\n    console.log(Object.keys(object), fields);\n    throw new Error(`${objectName} has a missing key ${missingKey}`);\n  }\n  for (const [key, value] of Object.entries(object)) {\n    if (!fields.includes(key)) {\n      throw new Error(`Unknown ${objectName} field: ${key}`);\n    }\n    if (value === undefined) {\n      throw new Error(`${objectName} field ${key} is undefined`);\n    }\n  }\n}\n\nexport class BangleConfig {\n  build: Partial<RawBuildConfig>;\n  app: Partial<RawAppConfig>;\n  debug: Partial<RawDebugConfig>;\n\n  static fromJSONString(s: string) {\n    const { build, app, debug } = JSON.parse(s);\n    return new BangleConfig({ app, build, debug });\n  }\n\n  serialize() {\n    const payload: Record<keyof FinalConfig, any> = {\n      build: this.build,\n      app: this.app,\n      debug: this.debug,\n    };\n    return JSON.stringify(payload);\n  }\n\n  finalize(): FinalConfig {\n    checkObject(this.build, buildFields, \"build\");\n    checkObject(this.app, requiredAppFields, \"app\");\n\n    if (Object.keys(this.debug).length > 0) {\n      checkObject(this.debug, debugFields, \"debug\");\n    }\n\n    return {\n      app: this.app as any,\n      build: this.build as any,\n      debug:\n        Object.keys(this.debug).length > 0 ? (this.debug as any) : undefined,\n    };\n  }\n\n  merge(other: BangleConfig) {\n    const build = { ...this.build, ...other.build };\n    const app = { ...this.app, ...other.app };\n    const debug = { ...this.debug, ...other.debug };\n\n    return new BangleConfig({ build, app, debug });\n  }\n  print(label = \"config\") {\n    const trim = (obj: any) => {\n      return JSON.parse(\n        JSON.stringify(obj, (_: any, v: any) => {\n          if (typeof v === \"string\") {\n            if (v.length > 20) {\n              return v.substring(0, 20) + \"...\";\n            }\n            return v;\n          }\n\n          return v;\n        })\n      );\n    };\n\n    const grp = console.group ? console.group : console.log;\n    const grpEnd = console.groupEnd ? console.groupEnd : console.log;\n\n    grp(label);\n    console.table(trim(this.app));\n    console.table(trim(this.build));\n    console.table(trim(this.debug));\n    grpEnd();\n  }\n\n  constructor(\n    obj: Partial<{\n      build: Partial<RawBuildConfig>;\n      app: Partial<RawAppConfig>;\n      debug: Partial<RawDebugConfig>;\n    }> = {}\n  ) {\n    this.build = obj.build || {};\n    this.app = obj.app || {};\n    this.debug = obj.debug || {};\n  }\n}\n"],
  "mappings": ";;;;;;AAAA,IAAMA,IAAc;EAClB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAXA,IAgCMC,IAAoB,CAAC,mBAAmB,eAAe;AAhC7D,IAsCMC,IAAc,CAAC,eAAe;AAKpC,SAASC,EAAeC,GAAWC,GAAkBC,GAAoB;AACvE,MAAI,OAAO,KAAKF,CAAM,EAAE,WAAWC,EAAO,QAAQ;AAChD,UAAME,IAAaF,EAAO,KAAK,CAACG,MAAU,EAAEA,KAASJ,EAAO;AAC5D,UAAA,QAAQ,IAAI,OAAO,KAAKA,CAAM,GAAGC,CAAM,GACjC,IAAI,MAAM,GAAGC,CAAAA,sBAAgCC,CAAAA,EAAY;EACjE;AACA,aAAW,CAACE,GAAKC,CAAK,KAAK,OAAO,QAAQN,CAAM,GAAG;AACjD,QAAI,CAACC,EAAO,SAASI,CAAG;AACtB,YAAM,IAAI,MAAM,WAAWH,CAAAA,WAAqBG,CAAAA,EAAK;AAEvD,QAAIC,MAAU;AACZ,YAAM,IAAI,MAAM,GAAGJ,CAAAA,UAAoBG,CAAAA,eAAkB;EAE7D;AACF;AAEO,IAAME,IAAN,MAAMA,GAAa;EAoExB,YACEC,IAIK,CAAA,GACL;AAzEFC,MAAA,MAAA,OAAA;AACAA,MAAA,MAAA,KAAA;AACAA,MAAA,MAAA,OAAA;AAwEO,SAAA,QAAQD,EAAI,SAAS,CAAA,GACrB,KAAA,MAAMA,EAAI,OAAO,CAAA,GACjB,KAAA,QAAQA,EAAI,SAAS,CAAA;EAC5B;EAzEA,OAAO,eAAeE,GAAW;AAC/B,UAAM,EAAE,OAAAC,GAAO,KAAAC,GAAK,OAAAC,EAAU,IAAA,KAAK,MAAMH,CAAC;AAC1C,WAAO,IAAIH,GAAa,EAAE,KAAAK,GAAK,OAAAD,GAAO,OAAAE,EAAO,CAAA;EAC/C;EAEA,YAAY;AACV,UAAMC,IAA0C;MAC9C,OAAO,KAAK;MACZ,KAAK,KAAK;MACV,OAAO,KAAK;IAAA;AAEP,WAAA,KAAK,UAAUA,CAAO;EAC/B;EAEA,WAAwB;AACV,WAAAf,EAAA,KAAK,OAAOH,GAAa,OAAO,GAChCG,EAAA,KAAK,KAAKF,GAAmB,KAAK,GAE1C,OAAO,KAAK,KAAK,KAAK,EAAE,SAAS,KACvBE,EAAA,KAAK,OAAOD,GAAa,OAAO,GAGvC;MACL,KAAK,KAAK;MACV,OAAO,KAAK;MACZ,OACE,OAAO,KAAK,KAAK,KAAK,EAAE,SAAS,IAAK,KAAK,QAAgB;IAAA;EAEjE;EAEA,MAAMiB,GAAqB;AACzB,UAAMJ,IAAQ,EAAE,GAAG,KAAK,OAAO,GAAGI,EAAM,MAAA,GAClCH,IAAM,EAAE,GAAG,KAAK,KAAK,GAAGG,EAAM,IAAA,GAC9BF,IAAQ,EAAE,GAAG,KAAK,OAAO,GAAGE,EAAM,MAAA;AAExC,WAAO,IAAIR,GAAa,EAAE,OAAAI,GAAO,KAAAC,GAAK,OAAAC,EAAO,CAAA;EAC/C;EACA,MAAMG,IAAQ,UAAU;AAChB,UAAAC,IAAO,CAACT,MACL,KAAK;MACV,KAAK,UAAUA,GAAK,CAACU,GAAQC,MACvB,OAAOA,KAAM,YACXA,EAAE,SAAS,KACNA,EAAE,UAAU,GAAG,EAAE,IAAI,QAKzBA,CACR;IAAA,GAICC,IAAM,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,KAC9CC,IAAS,QAAQ,WAAW,QAAQ,WAAW,QAAQ;AAE7DD,MAAIJ,CAAK,GACT,QAAQ,MAAMC,EAAK,KAAK,GAAG,CAAC,GAC5B,QAAQ,MAAMA,EAAK,KAAK,KAAK,CAAC,GAC9B,QAAQ,MAAMA,EAAK,KAAK,KAAK,CAAC,GACvBI,EAAAA;EACT;AAaF;",
  "names": ["buildFields", "requiredAppFields", "debugFields", "checkObject", "object", "fields", "objectName", "missingKey", "field", "key", "value", "BangleConfig", "obj", "__publicField", "s", "build", "app", "debug", "payload", "other", "label", "trim", "_", "v", "grp", "grpEnd"]
}

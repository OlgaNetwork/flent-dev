{
  "version": 3,
  "sources": ["../../../.yarn/__virtual__/@bangle.dev-wiki-link-virtual-e861cdee89/5/Users/ted/.yarn/berry/cache/@bangle.dev-wiki-link-npm-0.32.0-be6a285171-10c0.zip/node_modules/@bangle.dev/wiki-link/dist/index.js"],
  "sourcesContent": ["import { domSerializationHelpers } from '@bangle.dev/core';\nimport { inlineNodeParser } from '@bangle.dev/markdown';\n\nconst name = 'wikiLink';\nconst spec = specFactory;\nfunction specFactory() {\n    const { toDOM, parseDOM } = domSerializationHelpers(name, {\n        tag: 'span',\n        parsingPriority: 52,\n    });\n    return {\n        type: 'node',\n        name: name,\n        schema: {\n            attrs: {\n                path: {\n                    default: null,\n                },\n                title: {\n                    default: null,\n                },\n            },\n            inline: true,\n            group: 'inline',\n            selectable: false,\n            draggable: true,\n            toDOM,\n            parseDOM,\n        },\n        markdown: {\n            toMarkdown: (state, node) => {\n                state.text('[[', false);\n                const { path, title } = node.attrs;\n                let content = path;\n                if (title && title !== path) {\n                    content += '|' + title;\n                }\n                state.text(content, false);\n                state.text(']]', false);\n            },\n            parseMarkdown: {\n                wiki_link: {\n                    block: name,\n                    getAttrs: (tok) => {\n                        if (typeof tok.payload === 'string') {\n                            let [path, title] = tok.payload.split('|');\n                            return { path, title };\n                        }\n                        return null;\n                    },\n                    noCloseToken: true,\n                },\n            },\n        },\n    };\n}\n\nvar wikiLink = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    spec: spec\n});\n\nfunction wikiLinkMarkdownItPlugin(md) {\n    inlineNodeParser(md, {\n        tokenName: 'wiki_link',\n        regex: /\\[\\[([^\\]\\[]+)\\]\\]/g,\n        getTokenDetails: (match) => {\n            // 2 since [[ has length 2\n            return { payload: match.slice(2, -2), markup: match.slice(2, -2) };\n        },\n    });\n}\n\nexport { wikiLink, wikiLinkMarkdownItPlugin };\n"],
  "mappings": ";;;;;;;;;;;;AAGA,IAAM,OAAO;AACb,IAAM,OAAO;AACb,SAAS,cAAc;AACnB,QAAM,EAAE,OAAO,SAAS,IAAI,wBAAwB,MAAM;AAAA,IACtD,KAAK;AAAA,IACL,iBAAiB;AAAA,EACrB,CAAC;AACD,SAAO;AAAA,IACH,MAAM;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,MACJ,OAAO;AAAA,QACH,MAAM;AAAA,UACF,SAAS;AAAA,QACb;AAAA,QACA,OAAO;AAAA,UACH,SAAS;AAAA,QACb;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,WAAW;AAAA,MACX;AAAA,MACA;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,MACN,YAAY,CAAC,OAAO,SAAS;AACzB,cAAM,KAAK,MAAM,KAAK;AACtB,cAAM,EAAE,MAAM,MAAM,IAAI,KAAK;AAC7B,YAAI,UAAU;AACd,YAAI,SAAS,UAAU,MAAM;AACzB,qBAAW,MAAM;AAAA,QACrB;AACA,cAAM,KAAK,SAAS,KAAK;AACzB,cAAM,KAAK,MAAM,KAAK;AAAA,MAC1B;AAAA,MACA,eAAe;AAAA,QACX,WAAW;AAAA,UACP,OAAO;AAAA,UACP,UAAU,CAAC,QAAQ;AACf,gBAAI,OAAO,IAAI,YAAY,UAAU;AACjC,kBAAI,CAAC,MAAM,KAAK,IAAI,IAAI,QAAQ,MAAM,GAAG;AACzC,qBAAO,EAAE,MAAM,MAAM;AAAA,YACzB;AACA,mBAAO;AAAA,UACX;AAAA,UACA,cAAc;AAAA,QAClB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAEA,IAAI,WAAwB,OAAO,OAAO;AAAA,EACtC,WAAW;AAAA,EACX;AACJ,CAAC;AAED,SAAS,yBAAyB,IAAI;AAClC,mBAAiB,IAAI;AAAA,IACjB,WAAW;AAAA,IACX,OAAO;AAAA,IACP,iBAAiB,CAAC,UAAU;AAExB,aAAO,EAAE,SAAS,MAAM,MAAM,GAAG,EAAE,GAAG,QAAQ,MAAM,MAAM,GAAG,EAAE,EAAE;AAAA,IACrE;AAAA,EACJ,CAAC;AACL;",
  "names": []
}

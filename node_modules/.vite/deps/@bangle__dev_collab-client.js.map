{
  "version": 3,
  "sources": ["../../../../../../../Users/ted/.yarn/berry/cache/prosemirror-collab-npm-1.3.1-7906a9ff89-10c0.zip/node_modules/prosemirror-collab/dist/index.js", "../../../.yarn/__virtual__/@bangle.dev-collab-client-virtual-49c72eec71/5/Users/ted/.yarn/berry/cache/@bangle.dev-collab-client-npm-0.32.0-9de75abf98-10c0.zip/node_modules/@bangle.dev/collab-client/dist/index.js"],
  "sourcesContent": ["import { PluginKey, Plugin, TextSelection } from 'prosemirror-state';\n\nclass Rebaseable {\n    constructor(step, inverted, origin) {\n        this.step = step;\n        this.inverted = inverted;\n        this.origin = origin;\n    }\n}\n/**\nUndo a given set of steps, apply a set of other steps, and then\nredo them @internal\n*/\nfunction rebaseSteps(steps, over, transform) {\n    for (let i = steps.length - 1; i >= 0; i--)\n        transform.step(steps[i].inverted);\n    for (let i = 0; i < over.length; i++)\n        transform.step(over[i]);\n    let result = [];\n    for (let i = 0, mapFrom = steps.length; i < steps.length; i++) {\n        let mapped = steps[i].step.map(transform.mapping.slice(mapFrom));\n        mapFrom--;\n        if (mapped && !transform.maybeStep(mapped).failed) {\n            transform.mapping.setMirror(mapFrom, transform.steps.length - 1);\n            result.push(new Rebaseable(mapped, mapped.invert(transform.docs[transform.docs.length - 1]), steps[i].origin));\n        }\n    }\n    return result;\n}\n// This state field accumulates changes that have to be sent to the\n// central authority in the collaborating group and makes it possible\n// to integrate changes made by peers into our local document. It is\n// defined by the plugin, and will be available as the `collab` field\n// in the resulting editor state.\nclass CollabState {\n    constructor(\n    // The version number of the last update received from the central\n    // authority. Starts at 0 or the value of the `version` property\n    // in the option object, for the editor's value when the option\n    // was enabled.\n    version, \n    // The local steps that havent been successfully sent to the\n    // server yet.\n    unconfirmed) {\n        this.version = version;\n        this.unconfirmed = unconfirmed;\n    }\n}\nfunction unconfirmedFrom(transform) {\n    let result = [];\n    for (let i = 0; i < transform.steps.length; i++)\n        result.push(new Rebaseable(transform.steps[i], transform.steps[i].invert(transform.docs[i]), transform));\n    return result;\n}\nconst collabKey = new PluginKey(\"collab\");\n/**\nCreates a plugin that enables the collaborative editing framework\nfor the editor.\n*/\nfunction collab(config = {}) {\n    let conf = {\n        version: config.version || 0,\n        clientID: config.clientID == null ? Math.floor(Math.random() * 0xFFFFFFFF) : config.clientID\n    };\n    return new Plugin({\n        key: collabKey,\n        state: {\n            init: () => new CollabState(conf.version, []),\n            apply(tr, collab) {\n                let newState = tr.getMeta(collabKey);\n                if (newState)\n                    return newState;\n                if (tr.docChanged)\n                    return new CollabState(collab.version, collab.unconfirmed.concat(unconfirmedFrom(tr)));\n                return collab;\n            }\n        },\n        config: conf,\n        // This is used to notify the history plugin to not merge steps,\n        // so that the history can be rebased.\n        historyPreserveItems: true\n    });\n}\n/**\nCreate a transaction that represents a set of new steps received from\nthe authority. Applying this transaction moves the state forward to\nadjust to the authority's view of the document.\n*/\nfunction receiveTransaction(state, steps, clientIDs, options = {}) {\n    // Pushes a set of steps (received from the central authority) into\n    // the editor state (which should have the collab plugin enabled).\n    // Will recognize its own changes, and confirm unconfirmed steps as\n    // appropriate. Remaining unconfirmed steps will be rebased over\n    // remote steps.\n    let collabState = collabKey.getState(state);\n    let version = collabState.version + steps.length;\n    let ourID = collabKey.get(state).spec.config.clientID;\n    // Find out which prefix of the steps originated with us\n    let ours = 0;\n    while (ours < clientIDs.length && clientIDs[ours] == ourID)\n        ++ours;\n    let unconfirmed = collabState.unconfirmed.slice(ours);\n    steps = ours ? steps.slice(ours) : steps;\n    // If all steps originated with us, we're done.\n    if (!steps.length)\n        return state.tr.setMeta(collabKey, new CollabState(version, unconfirmed));\n    let nUnconfirmed = unconfirmed.length;\n    let tr = state.tr;\n    if (nUnconfirmed) {\n        unconfirmed = rebaseSteps(unconfirmed, steps, tr);\n    }\n    else {\n        for (let i = 0; i < steps.length; i++)\n            tr.step(steps[i]);\n        unconfirmed = [];\n    }\n    let newCollabState = new CollabState(version, unconfirmed);\n    if (options && options.mapSelectionBackward && state.selection instanceof TextSelection) {\n        tr.setSelection(TextSelection.between(tr.doc.resolve(tr.mapping.map(state.selection.anchor, -1)), tr.doc.resolve(tr.mapping.map(state.selection.head, -1)), -1));\n        tr.updated &= ~1;\n    }\n    return tr.setMeta(\"rebased\", nUnconfirmed).setMeta(\"addToHistory\", false).setMeta(collabKey, newCollabState);\n}\n/**\nProvides data describing the editor's unconfirmed steps, which need\nto be sent to the central authority. Returns null when there is\nnothing to send.\n\n`origins` holds the _original_ transactions that produced each\nsteps. This can be useful for looking up time stamps and other\nmetadata for the steps, but note that the steps may have been\nrebased, whereas the origin transactions are still the old,\nunchanged objects.\n*/\nfunction sendableSteps(state) {\n    let collabState = collabKey.getState(state);\n    if (collabState.unconfirmed.length == 0)\n        return null;\n    return {\n        version: collabState.version,\n        steps: collabState.unconfirmed.map(s => s.step),\n        clientID: collabKey.get(state).spec.config.clientID,\n        get origins() {\n            return this._origins || (this._origins = collabState.unconfirmed.map(s => s.origin));\n        }\n    };\n}\n/**\nGet the version up to which the collab plugin has synced with the\ncentral authority.\n*/\nfunction getVersion(state) {\n    return collabKey.getState(state).version;\n}\n\nexport { collab, getVersion, rebaseSteps, receiveTransaction, sendableSteps };\n", "import { getVersion, receiveTransaction, sendableSteps, collab } from 'prosemirror-collab';\nimport { CollabFail, ClientCommunication, DEFAULT_MANAGER_ID } from '@bangle.dev/collab-comms';\nimport { sleep, abortableSetTimeout, isTestEnv, uuid } from '@bangle.dev/utils';\nimport { PluginKey, Step, TextSelection, Selection, Node, Plugin } from '@bangle.dev/pm';\n\nconst MAX_STATES_TO_KEEP = 15;\n// If there are STUCK_IN_ERROR_THRESHOLD or more states in the history\n// the machine will transition to fatal (terminal) error state to prevent\n// infinite loops.\nconst STUCK_IN_ERROR_THRESHOLD = 5;\nconst collabClientKey = new PluginKey('bangle.dev/collab-client');\nconst collabMonitorKey = new PluginKey('bangle.dev/collabMonitorKey');\nvar EventType;\n(function (EventType) {\n    EventType[\"Fatal\"] = \"FATAL_EVENT\";\n    EventType[\"HardReset\"] = \"HARD_RESET_EVENT\";\n    EventType[\"InitDoc\"] = \"INIT_DOC_EVENT\";\n    EventType[\"InitError\"] = \"INIT_ERROR_EVENT\";\n    EventType[\"Pull\"] = \"PULL_EVENT\";\n    EventType[\"Push\"] = \"PUSH_EVENT\";\n    EventType[\"PushPullError\"] = \"PUSH_PULL_ERROR_EVENT\";\n    EventType[\"Ready\"] = \"READY_EVENT\";\n    EventType[\"Restart\"] = \"RESTART_EVENT\";\n})(EventType || (EventType = {}));\nvar FatalErrorCode;\n(function (FatalErrorCode) {\n    FatalErrorCode[\"InitialDocLoadFailed\"] = \"INITIAL_DOC_LOAD_FAILED\";\n    FatalErrorCode[\"StuckInInfiniteLoop\"] = \"STUCK_IN_INFINITE_LOOP\";\n    FatalErrorCode[\"IncorrectManager\"] = \"INCORRECT_MANAGER\";\n    FatalErrorCode[\"HistoryNotAvailable\"] = \"HISTORY_NOT_AVAILABLE\";\n    FatalErrorCode[\"DocumentNotFound\"] = \"DOCUMENT_NOT_FOUND\";\n    FatalErrorCode[\"UnexpectedState\"] = \"UNEXPECTED_STATE\";\n})(FatalErrorCode || (FatalErrorCode = {}));\nvar CollabStateName;\n(function (CollabStateName) {\n    CollabStateName[\"Fatal\"] = \"FATAL_STATE\";\n    CollabStateName[\"Init\"] = \"INIT_STATE\";\n    CollabStateName[\"InitDoc\"] = \"INIT_DOC_STATE\";\n    CollabStateName[\"InitError\"] = \"INIT_ERROR_STATE\";\n    CollabStateName[\"Pull\"] = \"PULL_STATE\";\n    CollabStateName[\"Push\"] = \"PUSH_STATE\";\n    CollabStateName[\"PushPullError\"] = \"PUSH_PULL_ERROR_STATE\";\n    CollabStateName[\"Ready\"] = \"READY_STATE\";\n})(CollabStateName || (CollabStateName = {}));\n\n// Applies steps from the server to the editor.\n// returns false if applying these steps failed\nfunction applySteps(view, payload, logger) {\n    if (view.isDestroyed) {\n        return;\n    }\n    const steps = (payload.steps ? payload.steps : []).map((j) => Step.fromJSON(view.state.schema, j));\n    const clientIDs = payload.clientIDs ? payload.clientIDs : [];\n    if (steps.length === 0) {\n        logger('no steps', payload, 'version', getVersion(view.state));\n        return;\n    }\n    try {\n        const tr = receiveTransaction(view.state, steps, clientIDs)\n            .setMeta('addToHistory', false)\n            .setMeta('bangle.dev/isRemote', true);\n        const newState = view.state.apply(tr);\n        view.updateState(newState);\n    }\n    catch (error) {\n        console.error(error);\n        return false;\n    }\n    logger('after apply version', getVersion(view.state));\n    return true;\n}\n// Replaces the current doc content with the provided one.\n// returns false if applying these steps failed.\nfunction applyDoc(view, doc, version, oldSelection) {\n    if (view.isDestroyed) {\n        return;\n    }\n    const prevSelection = view.state.selection instanceof TextSelection\n        ? view.state.selection\n        : undefined;\n    let tr = replaceDocument(view.state, doc, version);\n    const selection = oldSelection || prevSelection;\n    if (selection) {\n        let { from } = selection;\n        if (from >= tr.doc.content.size) {\n            tr = tr.setSelection(Selection.atEnd(tr.doc));\n        }\n        else {\n            tr = tr.setSelection(Selection.near(tr.doc.resolve(from)));\n        }\n    }\n    try {\n        const newState = view.state.apply(tr.setMeta('bangle.dev/isRemote', true));\n        view.updateState(newState);\n    }\n    catch (error) {\n        console.error(error);\n        return false;\n    }\n    return true;\n}\nfunction replaceDocument(state, serializedDoc, version) {\n    const { schema, tr } = state;\n    const content = \n    // TODO remove serializedDoc\n    serializedDoc instanceof Node\n        ? serializedDoc.content\n        : (serializedDoc.content || []).map((child) => schema.nodeFromJSON(child));\n    const hasContent = Array.isArray(content)\n        ? content.length > 0\n        : Boolean(content);\n    if (!hasContent) {\n        return tr;\n    }\n    tr.setMeta('addToHistory', false);\n    tr.replaceWith(0, state.doc.nodeSize - 2, content);\n    tr.setSelection(Selection.atStart(tr.doc));\n    if (typeof version !== undefined) {\n        const collabState = { version, unconfirmed: [] };\n        tr.setMeta('collab$', collabState);\n    }\n    return tr;\n}\nfunction getCollabState(state) {\n    var _a;\n    return (_a = collabClientKey.getState(state)) === null || _a === void 0 ? void 0 : _a.collabState;\n}\n\n/**\n * If in fatal state (a terminal state) and  returns the error information.\n * @returns\n */\nfunction queryFatalError() {\n    return (state) => {\n        const collabState = getCollabState(state);\n        if (collabState === null || collabState === void 0 ? void 0 : collabState.isFatalState()) {\n            return collabState.state;\n        }\n        return undefined;\n    };\n}\nfunction queryCollabState() {\n    return (state) => {\n        const collabState = getCollabState(state);\n        return collabState;\n    };\n}\n// Discards any editor changes that have not yet been sent to the server.\n// and sets the editor doc to the one provider by server.\nfunction hardResetClient() {\n    return (state, dispatch) => {\n        const collabState = getCollabState(state);\n        collabState === null || collabState === void 0 ? void 0 : collabState.dispatchCollabPluginEvent({\n            signal: new AbortController().signal,\n            collabEvent: {\n                type: EventType.HardReset,\n            },\n            debugInfo: 'hard-reset',\n        })(state, dispatch);\n        return true;\n    };\n}\n// Saves the server version of the document. Rest of the extension\n// then uses this information to determine whether to pull from server or not.\nfunction updateServerVersion(serverVersion) {\n    return (state, dispatch) => {\n        const pluginState = collabMonitorKey.getState(state);\n        if (!pluginState) {\n            return false;\n        }\n        if (pluginState.serverVersion !== serverVersion) {\n            const meta = { serverVersion: serverVersion };\n            dispatch === null || dispatch === void 0 ? void 0 : dispatch(state.tr.setMeta(collabMonitorKey, meta));\n            return true;\n        }\n        return false;\n    };\n}\nfunction onLocalChanges() {\n    return (state, dispatch) => {\n        const collabState = getCollabState(state);\n        if (collabState === null || collabState === void 0 ? void 0 : collabState.isReadyState()) {\n            collabState === null || collabState === void 0 ? void 0 : collabState.dispatch(new AbortController().signal, state, dispatch, {\n                type: EventType.Push,\n            }, 'onLocalChanges');\n            return true;\n        }\n        return false;\n    };\n}\nfunction isOutdatedVersion() {\n    return (state) => {\n        var _a;\n        const serverVersion = (_a = collabMonitorKey.getState(state)) === null || _a === void 0 ? void 0 : _a.serverVersion;\n        return (typeof serverVersion === 'number' && getVersion(state) < serverVersion);\n    };\n}\nfunction onOutdatedVersion() {\n    return (state, dispatch) => {\n        const collabState = getCollabState(state);\n        // only dispatch if in ready state, so as to trigger a state transition\n        // from ready-state -> whatever.\n        // If state is not in ready state, whenever it eventually transitions to\n        // ready state it's own action will dispatch these events automatically.\n        if (collabState === null || collabState === void 0 ? void 0 : collabState.isReadyState()) {\n            collabState.dispatch(new AbortController().signal, state, dispatch, {\n                type: EventType.Pull,\n            }, 'collabMonitorKey(outdated-local-version)');\n            return true;\n        }\n        return false;\n    };\n}\nfunction isStuckInErrorStates() {\n    return (state) => {\n        var _a;\n        const previousStates = (_a = collabClientKey.getState(state)) === null || _a === void 0 ? void 0 : _a.previousStates;\n        if (!previousStates) {\n            return false;\n        }\n        return (previousStates.filter((s) => s.isTaggedError).length >\n            STUCK_IN_ERROR_THRESHOLD);\n    };\n}\n\nclass CollabBaseState {\n    constructor() {\n        // If false, the document is frozen and no edits and _almost_ no transactions are allowed.\n        // Some collab tr's are allowed.\n        this.isEditingBlocked = false;\n        this.isTaggedError = false;\n        this.createdAt = Date.now();\n    }\n    // A helper function to dispatch events in correct shape\n    dispatchCollabPluginEvent(data) {\n        return (state, dispatch) => {\n            if (!data.signal.aborted) {\n                dispatch === null || dispatch === void 0 ? void 0 : dispatch(state.tr.setMeta(collabClientKey, data));\n                return true;\n            }\n            return false;\n        };\n    }\n    isFatalState() {\n        return this instanceof FatalState;\n    }\n    isReadyState() {\n        return this instanceof ReadyState;\n    }\n}\nclass FatalState extends CollabBaseState {\n    constructor(state, debugInfo) {\n        super();\n        this.state = state;\n        this.debugInfo = debugInfo;\n        this.isEditingBlocked = true;\n        this.isTaggedError = true;\n        this.name = CollabStateName.Fatal;\n    }\n    dispatch(signal, state, dispatch, event, debugInfo) {\n        return this.dispatchCollabPluginEvent({\n            signal,\n            collabEvent: event,\n            debugInfo,\n        })(state, dispatch);\n    }\n    async runAction({ signal, clientInfo, logger }) {\n        if (signal.aborted) {\n            return;\n        }\n        logger(`Freezing document(${clientInfo.docName}) to prevent further edits due to FatalState`);\n        return;\n    }\n    transition(event, debugInfo) {\n        return this;\n    }\n}\nclass InitState extends CollabBaseState {\n    constructor(state = {}, debugInfo) {\n        super();\n        this.state = state;\n        this.debugInfo = debugInfo;\n        this.isEditingBlocked = true;\n        this.name = CollabStateName.Init;\n        // clientCreatedAt should just be created once at the start of the client\n        // and not at any state where the value might change during the course of the clients life.\n        // this field setup order is instrumental to connect with the server.\n        this.clientCreatedAt = Date.now();\n    }\n    dispatch(signal, state, dispatch, event, debugInfo) {\n        return this.dispatchCollabPluginEvent({\n            signal,\n            collabEvent: event,\n            debugInfo,\n        })(state, dispatch);\n    }\n    async runAction({ clientInfo, signal, view }) {\n        if (signal.aborted) {\n            return;\n        }\n        const { docName, userId, clientCom } = clientInfo;\n        const debugSource = `initStateAction:`;\n        // Wait for the editor state to settle in before make the getDocument request.\n        if (typeof clientInfo.warmupTime === 'number') {\n            await sleep(clientInfo.warmupTime);\n            if (signal.aborted) {\n                return;\n            }\n        }\n        const result = await clientCom.getDocument({\n            clientCreatedAt: this.clientCreatedAt,\n            docName,\n            userId,\n        });\n        if (signal.aborted) {\n            return;\n        }\n        if (!result.ok) {\n            this.dispatch(signal, view.state, view.dispatch, {\n                type: EventType.InitError,\n                payload: { failure: result.body },\n            }, debugSource);\n            return;\n        }\n        const { doc, managerId, version } = result.body;\n        this.dispatch(signal, view.state, view.dispatch, {\n            type: EventType.InitDoc,\n            payload: {\n                doc: view.state.schema.nodeFromJSON(doc),\n                version,\n                managerId,\n                selection: undefined,\n            },\n        }, debugSource);\n        return;\n    }\n    transition(event, debugInfo) {\n        const type = event.type;\n        if (type === EventType.InitDoc) {\n            const { payload } = event;\n            return new InitDocState({\n                initialDoc: payload.doc,\n                initialSelection: payload.selection,\n                initialVersion: payload.version,\n                managerId: payload.managerId,\n                clientCreatedAt: this.clientCreatedAt,\n            }, debugInfo);\n        }\n        else if (type === EventType.InitError) {\n            return new InitErrorState({\n                failure: event.payload.failure,\n            }, debugInfo);\n        }\n        else {\n            console.debug('@bangle.dev/collab-client Ignoring event' + type);\n            return;\n        }\n    }\n}\nclass InitDocState extends CollabBaseState {\n    constructor(state, debugInfo) {\n        super();\n        this.state = state;\n        this.debugInfo = debugInfo;\n        this.isEditingBlocked = true;\n        this.name = CollabStateName.InitDoc;\n    }\n    dispatch(signal, state, dispatch, event, debugInfo) {\n        return this.dispatchCollabPluginEvent({\n            signal,\n            collabEvent: event,\n            debugInfo,\n        })(state, dispatch);\n    }\n    async runAction({ signal, view }) {\n        if (signal.aborted) {\n            return;\n        }\n        const { initialDoc, initialVersion, initialSelection } = this.state;\n        if (!signal.aborted) {\n            const success = applyDoc(view, initialDoc, initialVersion, initialSelection);\n            if (success === false) {\n                this.dispatch(signal, view.state, view.dispatch, {\n                    type: EventType.Fatal,\n                    payload: {\n                        message: 'Failed to load initial doc',\n                        errorCode: FatalErrorCode.InitialDocLoadFailed,\n                    },\n                });\n            }\n            else {\n                this.dispatch(signal, view.state, view.dispatch, {\n                    type: EventType.Ready,\n                }, `runAction:${this.name}`);\n            }\n        }\n    }\n    transition(event, debugInfo) {\n        const type = event.type;\n        if (type === EventType.Ready) {\n            return new ReadyState(this.state, debugInfo);\n        }\n        else if (type === EventType.Fatal) {\n            return new FatalState({ message: event.payload.message, errorCode: event.payload.errorCode }, debugInfo);\n        }\n        else {\n            console.debug('@bangle.dev/collab-client Ignoring event' + type);\n            return;\n        }\n    }\n}\nclass InitErrorState extends CollabBaseState {\n    constructor(state, debugInfo) {\n        super();\n        this.state = state;\n        this.debugInfo = debugInfo;\n        this.isEditingBlocked = true;\n        this.isTaggedError = true;\n        this.name = CollabStateName.InitError;\n    }\n    dispatch(signal, state, dispatch, event, debugInfo) {\n        return this.dispatchCollabPluginEvent({\n            signal,\n            collabEvent: event,\n            debugInfo,\n        })(state, dispatch);\n    }\n    async runAction(param) {\n        await handleErrorStateAction({ ...param, collabState: this });\n    }\n    transition(event, debugInfo) {\n        const type = event.type;\n        if (type === EventType.Restart) {\n            return new InitState(undefined, debugInfo);\n        }\n        else if (type === EventType.Fatal) {\n            return new FatalState({ message: event.payload.message, errorCode: event.payload.errorCode }, debugInfo);\n        }\n        else {\n            console.debug('@bangle.dev/collab-client Ignoring event' + type);\n            return undefined;\n        }\n    }\n}\nclass ReadyState extends CollabBaseState {\n    constructor(state, debugInfo) {\n        super();\n        this.state = state;\n        this.debugInfo = debugInfo;\n        this.name = CollabStateName.Ready;\n    }\n    dispatch(signal, state, dispatch, event, debugInfo) {\n        return this.dispatchCollabPluginEvent({\n            signal,\n            collabEvent: event,\n            debugInfo,\n        })(state, dispatch);\n    }\n    async runAction({ signal, view }) {\n        if (signal.aborted) {\n            return;\n        }\n        const debugString = `runActions:${this.name}`;\n        if (!signal.aborted) {\n            if (isOutdatedVersion()(view.state)) {\n                this.dispatch(signal, view.state, view.dispatch, {\n                    type: EventType.Pull,\n                }, debugString + '(outdated-local-version)');\n            }\n            else if (sendableSteps(view.state)) {\n                this.dispatch(signal, view.state, view.dispatch, {\n                    type: EventType.Push,\n                }, debugString + '(sendable-steps)');\n            }\n        }\n        return;\n    }\n    transition(event, debugInfo) {\n        const type = event.type;\n        if (type === EventType.Push) {\n            return new PushState(this.state, debugInfo);\n        }\n        else if (type === EventType.Pull) {\n            return new PullState(this.state, debugInfo);\n        }\n        else {\n            console.debug('@bangle.dev/collab-client Ignoring event' + type);\n            return;\n        }\n    }\n}\nclass PushState extends CollabBaseState {\n    constructor(state, debugInfo) {\n        super();\n        this.state = state;\n        this.debugInfo = debugInfo;\n        this.name = CollabStateName.Push;\n    }\n    dispatch(signal, state, dispatch, event, debugInfo) {\n        return this.dispatchCollabPluginEvent({\n            signal,\n            collabEvent: event,\n            debugInfo,\n        })(state, dispatch);\n    }\n    async runAction({ clientInfo, signal, view }) {\n        if (signal.aborted) {\n            return;\n        }\n        const { docName, userId, clientCom } = clientInfo;\n        const debugSource = `pushStateAction:`;\n        const steps = sendableSteps(view.state);\n        if (!steps) {\n            this.dispatch(signal, view.state, view.dispatch, {\n                type: EventType.Ready,\n            }, debugSource + '(no steps):');\n            return;\n        }\n        const { managerId } = this.state;\n        const response = await clientCom.pushEvents({\n            clientCreatedAt: this.state.clientCreatedAt,\n            version: getVersion(view.state),\n            steps: steps ? steps.steps.map((s) => s.toJSON()) : [],\n            // TODO  the default value numerical 0 before\n            clientID: (steps ? steps.clientID : 0) + '',\n            docName: docName,\n            userId: userId,\n            managerId: managerId,\n        });\n        if (signal.aborted) {\n            return;\n        }\n        if (response.ok) {\n            // Pull changes to confirm our steps and also\n            // get any new steps from other clients\n            this.dispatch(signal, view.state, view.dispatch, {\n                type: EventType.Pull,\n            }, debugSource);\n        }\n        else {\n            this.dispatch(signal, view.state, view.dispatch, {\n                type: EventType.PushPullError,\n                payload: { failure: response.body },\n            }, debugSource);\n        }\n        return;\n    }\n    transition(event, debugInfo) {\n        const type = event.type;\n        if (type === EventType.Ready) {\n            return new ReadyState(this.state, debugInfo);\n        }\n        else if (type === EventType.Pull) {\n            return new PullState(this.state, debugInfo);\n        }\n        else if (type === EventType.PushPullError) {\n            return new PushPullErrorState({\n                failure: event.payload.failure,\n                initDocState: this.state,\n            }, debugInfo);\n        }\n        else {\n            console.debug('@bangle.dev/collab-client Ignoring event' + type);\n            return;\n        }\n    }\n}\nclass PullState extends CollabBaseState {\n    constructor(state, debugInfo) {\n        super();\n        this.state = state;\n        this.debugInfo = debugInfo;\n        this.name = CollabStateName.Pull;\n    }\n    dispatch(signal, state, dispatch, event, debugInfo) {\n        return this.dispatchCollabPluginEvent({\n            signal,\n            collabEvent: event,\n            debugInfo,\n        })(state, dispatch);\n    }\n    async runAction({ clientInfo, logger, signal, view }) {\n        if (signal.aborted) {\n            return;\n        }\n        const { docName, userId, clientCom } = clientInfo;\n        const { managerId } = this.state;\n        const response = await clientCom.pullEvents({\n            clientCreatedAt: this.state.clientCreatedAt,\n            version: getVersion(view.state),\n            docName: docName,\n            userId: userId,\n            managerId: managerId,\n        });\n        if (signal.aborted) {\n            return;\n        }\n        const debugSource = `pullStateAction:`;\n        if (response.ok) {\n            const success = applySteps(view, response.body, logger);\n            if (success === false) {\n                this.dispatch(signal, view.state, view.dispatch, {\n                    type: EventType.PushPullError,\n                    payload: { failure: CollabFail.ApplyFailed },\n                }, debugSource + '(local-apply-failed)');\n            }\n            else {\n                // keep our local server version up to date with what server responded with\n                updateServerVersion(response.body.version)(view.state, view.dispatch);\n                this.dispatch(signal, view.state, view.dispatch, {\n                    type: EventType.Ready,\n                }, debugSource);\n            }\n        }\n        else {\n            this.dispatch(signal, view.state, view.dispatch, {\n                type: EventType.PushPullError,\n                payload: { failure: response.body },\n            }, debugSource);\n        }\n        return;\n    }\n    transition(event, debugInfo) {\n        const type = event.type;\n        if (type === EventType.Ready) {\n            return new ReadyState(this.state, debugInfo);\n        }\n        else if (type === EventType.PushPullError) {\n            return new PushPullErrorState({\n                failure: event.payload.failure,\n                initDocState: this.state,\n            }, debugInfo);\n        }\n        else {\n            return;\n        }\n    }\n}\nclass PushPullErrorState extends CollabBaseState {\n    constructor(state, debugInfo) {\n        super();\n        this.state = state;\n        this.debugInfo = debugInfo;\n        this.isTaggedError = true;\n        this.name = CollabStateName.PushPullError;\n    }\n    dispatch(signal, state, dispatch, event, debugInfo) {\n        return this.dispatchCollabPluginEvent({\n            signal,\n            collabEvent: event,\n            debugInfo,\n        })(state, dispatch);\n    }\n    async runAction(param) {\n        await handleErrorStateAction({ ...param, collabState: this });\n    }\n    transition(event, debugInfo) {\n        const type = event.type;\n        if (type === EventType.Restart) {\n            return new InitState(undefined, debugInfo);\n        }\n        else if (type === EventType.Pull) {\n            return new PullState(this.state.initDocState, debugInfo);\n        }\n        else if (type === EventType.Fatal) {\n            return new FatalState({ message: event.payload.message, errorCode: event.payload.errorCode }, debugInfo);\n        }\n        else {\n            console.debug('@bangle.dev/collab-client Ignoring event' + type);\n            return;\n        }\n    }\n}\nconst handleErrorStateAction = async ({ clientInfo, view, logger, signal, collabState, }) => {\n    if (signal.aborted) {\n        return;\n    }\n    const failure = collabState.state.failure;\n    logger('Handling failure=', failure, 'currentState=', collabState.name);\n    const debugSource = `pushPullErrorStateAction(${failure}):`;\n    if (isStuckInErrorStates()(view.state)) {\n        collabState.dispatch(signal, view.state, view.dispatch, {\n            type: EventType.Fatal,\n            payload: {\n                message: 'Stuck in error loop, last failure: ' + failure,\n                errorCode: FatalErrorCode.StuckInInfiniteLoop,\n            },\n        }, debugSource);\n        return;\n    }\n    switch (failure) {\n        case CollabFail.InvalidVersion: {\n            abortableSetTimeout(() => {\n                if (!signal.aborted) {\n                    collabState.dispatch(signal, view.state, view.dispatch, {\n                        type: EventType.Restart,\n                    }, debugSource);\n                }\n            }, signal, clientInfo.cooldownTime);\n            return;\n        }\n        case CollabFail.IncorrectManager: {\n            collabState.dispatch(signal, view.state, view.dispatch, {\n                type: EventType.Fatal,\n                payload: {\n                    message: 'Incorrect manager',\n                    errorCode: FatalErrorCode.IncorrectManager,\n                },\n            }, debugSource);\n            return;\n        }\n        case CollabFail.HistoryNotAvailable: {\n            collabState.dispatch(signal, view.state, view.dispatch, {\n                type: EventType.Fatal,\n                payload: {\n                    message: 'History/Server not available',\n                    errorCode: FatalErrorCode.HistoryNotAvailable,\n                },\n            }, debugSource);\n            return;\n        }\n        case CollabFail.DocumentNotFound: {\n            logger('Document not found');\n            collabState.dispatch(signal, view.state, view.dispatch, {\n                type: EventType.Fatal,\n                payload: {\n                    message: 'Document not found',\n                    errorCode: FatalErrorCode.DocumentNotFound,\n                },\n            }, debugSource);\n            return;\n        }\n        // 409\n        case CollabFail.OutdatedVersion: {\n            if (collabState instanceof PushPullErrorState) {\n                collabState.dispatch(signal, view.state, view.dispatch, {\n                    type: EventType.Pull,\n                }, debugSource);\n            }\n            else {\n                collabState.dispatch(signal, view.state, view.dispatch, {\n                    type: EventType.Fatal,\n                    payload: {\n                        message: `Cannot handle ${failure} in state=${collabState.name}`,\n                        // TODO: is this the right error code?\n                        errorCode: FatalErrorCode.UnexpectedState,\n                    },\n                }, debugSource);\n            }\n            return;\n        }\n        // 500\n        case CollabFail.ManagerDestroyed: {\n            abortableSetTimeout(() => {\n                if (!signal.aborted) {\n                    if (collabState instanceof PushPullErrorState) {\n                        collabState.dispatch(signal, view.state, view.dispatch, {\n                            type: EventType.Pull,\n                        }, debugSource);\n                    }\n                    else if (collabState instanceof InitErrorState) {\n                        collabState.dispatch(signal, view.state, view.dispatch, {\n                            type: EventType.Restart,\n                        }, debugSource);\n                    }\n                    else ;\n                }\n            }, signal, clientInfo.cooldownTime);\n            return;\n        }\n        case CollabFail.ApplyFailed: {\n            if (collabState instanceof PushPullErrorState) {\n                abortableSetTimeout(() => {\n                    if (!signal.aborted) {\n                        collabState.dispatch(signal, view.state, view.dispatch, {\n                            type: EventType.Pull,\n                        }, debugSource);\n                    }\n                }, signal, clientInfo.cooldownTime);\n            }\n            else {\n                collabState.dispatch(signal, view.state, view.dispatch, {\n                    type: EventType.Fatal,\n                    payload: {\n                        message: `Cannot handle ${failure} in state=${collabState.name}`,\n                        errorCode: FatalErrorCode.UnexpectedState,\n                    },\n                }, debugSource);\n            }\n            return;\n        }\n        case CollabFail.ManagerUnresponsive: {\n            abortableSetTimeout(() => {\n                if (!signal.aborted) {\n                    if (collabState instanceof PushPullErrorState) {\n                        collabState.dispatch(signal, view.state, view.dispatch, {\n                            type: EventType.Pull,\n                        }, debugSource);\n                    }\n                    else if (collabState instanceof InitErrorState) {\n                        collabState.dispatch(signal, view.state, view.dispatch, {\n                            type: EventType.Restart,\n                        }, debugSource);\n                    }\n                    else ;\n                }\n            }, signal, clientInfo.cooldownTime);\n            return;\n        }\n        default: {\n            throw new Error(`Unknown failure ${failure}`);\n        }\n    }\n};\n\nconst LOG = true;\nlet log = (isTestEnv ? false : LOG)\n    ? console.debug.bind(console, `collab-client:`)\n    : () => { };\nconst collabMonitorInitialState = {\n    serverVersion: undefined,\n};\nconst INFINITE_TRANSITION_SAMPLE = 500;\nconst INFINITE_TRANSITION_THRESHOLD_TIME = 1000;\nfunction collabClientPlugin({ requestTimeout, clientID, collabMessageBus, docName, managerId, cooldownTime, userId, warmupTime, }) {\n    const logger = (state) => (...args) => {\n        var _a;\n        return log(`${clientID}:version=${getVersion(state)}:debugInfo=${(_a = collabClientKey.getState(state)) === null || _a === void 0 ? void 0 : _a.collabState.debugInfo}`, ...args);\n    };\n    return [\n        new Plugin({\n            key: collabClientKey,\n            filterTransaction(tr, state) {\n                var _a;\n                // Do not block collab plugins' transactions\n                if (tr.getMeta(collabClientKey) ||\n                    tr.getMeta(collabMonitorKey) ||\n                    tr.getMeta('bangle.dev/isRemote')) {\n                    return true;\n                }\n                // prevent any other tr while state is in one of the no-edit state\n                if (tr.docChanged && ((_a = getCollabState(state)) === null || _a === void 0 ? void 0 : _a.isEditingBlocked) === true) {\n                    console.debug('@bangle.dev/collab-client blocking transaction');\n                    return false;\n                }\n                return true;\n            },\n            state: {\n                init() {\n                    return {\n                        collabState: new InitState(),\n                        previousStates: [],\n                        infiniteTransitionGuard: { counter: 0, lastChecked: 0 },\n                    };\n                },\n                apply(tr, value, oldState, newState) {\n                    const meta = tr.getMeta(collabClientKey);\n                    if (meta === undefined || !meta.collabEvent) {\n                        return value;\n                    }\n                    // By pass any logic, if we receive this event and set the state to Init\n                    if (meta.collabEvent.type === EventType.HardReset) {\n                        logger(newState)('apply state HARD RESET, newStateName=', CollabStateName.Init, 'oldStateName=', value.collabState.name);\n                        return {\n                            collabState: new InitState(undefined, '(HardReset)'),\n                            previousStates: [],\n                            infiniteTransitionGuard: { counter: 0, lastChecked: 0 },\n                        };\n                    }\n                    value.infiniteTransitionGuard.counter++;\n                    // A guard to prevent infinite transitions in case of a bug\n                    if (value.infiniteTransitionGuard.counter %\n                        INFINITE_TRANSITION_SAMPLE ===\n                        0) {\n                        if (Date.now() - value.infiniteTransitionGuard.lastChecked <=\n                            INFINITE_TRANSITION_THRESHOLD_TIME) {\n                            queueMicrotask(() => {\n                                throw new Error('Stuck in infinite transitions. Last few states: ' +\n                                    value.previousStates\n                                        .map((s) => s.name + (s.debugInfo ? `:${s.debugInfo}` : ''))\n                                        .join(', ')\n                                        .slice(0, 5));\n                            });\n                            return {\n                                collabState: new FatalState({\n                                    message: 'Infinite transitions',\n                                    errorCode: FatalErrorCode.StuckInInfiniteLoop,\n                                }, '(stuck in infinite transitions)'),\n                                previousStates: [value.collabState, ...value.previousStates],\n                                infiniteTransitionGuard: { counter: 0, lastChecked: 0 },\n                            };\n                        }\n                        value.infiniteTransitionGuard.lastChecked = Date.now();\n                        value.infiniteTransitionGuard.counter = 0;\n                    }\n                    const newCollabState = value.collabState.transition(meta.collabEvent, meta.debugInfo);\n                    if (!newCollabState) {\n                        return value;\n                    }\n                    if (newCollabState.name !== value.collabState.name) {\n                        logger(newState)('apply state, newStateName=', newCollabState.name, `debugInfo=${newCollabState.debugInfo}`, 'oldStateName=', value.collabState.name);\n                        let previousStates = [value.collabState, ...value.previousStates];\n                        if (previousStates.length > MAX_STATES_TO_KEEP) {\n                            previousStates = previousStates.slice(0, MAX_STATES_TO_KEEP);\n                        }\n                        return {\n                            ...value,\n                            collabState: newCollabState,\n                            previousStates: previousStates,\n                        };\n                    }\n                    logger(newState)(`applyState IGNORE EVENT ${meta.collabEvent.type} due to self transition`, `debugInfo=${meta.debugInfo}`);\n                    return value;\n                },\n            },\n            view(view) {\n                let actionController = new AbortController();\n                let clientComController = new AbortController();\n                let clientCom = new ClientCommunication({\n                    clientId: clientID,\n                    managerId,\n                    docName,\n                    messageBus: collabMessageBus,\n                    signal: clientComController.signal,\n                    requestTimeout: requestTimeout,\n                    onNewVersion: ({ version }) => {\n                        updateServerVersion(version)(view.state, view.dispatch);\n                    },\n                    onResetClient() {\n                        hardResetClient()(view.state, view.dispatch);\n                    },\n                });\n                const pluginState = collabClientKey.getState(view.state);\n                const clientInfo = {\n                    clientID,\n                    docName,\n                    cooldownTime,\n                    clientCom,\n                    managerId,\n                    userId,\n                    warmupTime,\n                };\n                if (pluginState) {\n                    pluginState.collabState.runAction({\n                        clientInfo,\n                        view,\n                        signal: actionController.signal,\n                        logger: logger(view.state),\n                    });\n                }\n                return {\n                    destroy() {\n                        actionController.abort();\n                        clientComController.abort();\n                    },\n                    update(view, prevState) {\n                        var _a;\n                        const pluginState = collabClientKey.getState(view.state);\n                        // ignore running actions if collab state didn't change\n                        if ((pluginState === null || pluginState === void 0 ? void 0 : pluginState.collabState) ===\n                            ((_a = collabClientKey.getState(prevState)) === null || _a === void 0 ? void 0 : _a.collabState)) {\n                            return;\n                        }\n                        if (pluginState) {\n                            actionController.abort();\n                            actionController = new AbortController();\n                            pluginState.collabState.runAction({\n                                clientInfo,\n                                view,\n                                signal: actionController.signal,\n                                logger: logger(view.state),\n                            });\n                        }\n                    },\n                };\n            },\n        }),\n        new Plugin({\n            key: collabMonitorKey,\n            props: {\n                attributes: (state) => {\n                    var _a;\n                    const editingBlocked = (_a = getCollabState(state)) === null || _a === void 0 ? void 0 : _a.isEditingBlocked;\n                    return {\n                        class: editingBlocked\n                            ? 'bangle-collab-frozen'\n                            : 'bangle-collab-active',\n                    };\n                },\n            },\n            state: {\n                init: (_, _state) => {\n                    return collabMonitorInitialState;\n                },\n                apply: (tr, value, oldState, newState) => {\n                    var _a;\n                    const meta = tr.getMeta(collabMonitorKey);\n                    if (meta) {\n                        logger(newState)('collabMonitorKey received tr', meta);\n                        return {\n                            ...value,\n                            ...meta,\n                        };\n                    }\n                    // Reset collab monitors state if collab state is restarted\n                    if (((_a = getCollabState(newState)) === null || _a === void 0 ? void 0 : _a.name) === CollabStateName.Init) {\n                        return collabMonitorInitialState;\n                    }\n                    return value;\n                },\n            },\n            view(view) {\n                const check = (view) => {\n                    // There are two ways different ways this extension keeps a check on outdated version (aka - needs to pull)\n                    // and sendable steps (needs to push):\n                    // 1. the ready state action which gets triggered when collabClientKey plugin transitions\n                    //    to the ready state.\n                    // 2. this plugin (collabMonitorKey) which runs `check` every time the view is updated and\n                    //    checks if we need a push or pull.\n                    // outdated version gets a priority over local changes\n                    if (isOutdatedVersion()(view.state)) {\n                        onOutdatedVersion()(view.state, view.dispatch);\n                    }\n                    // If there are sendable steps to send to server\n                    else if (sendableSteps(view.state)) {\n                        onLocalChanges()(view.state, view.dispatch);\n                    }\n                };\n                check(view);\n                return {\n                    update(view) {\n                        check(view);\n                    },\n                };\n            },\n        }),\n    ];\n}\n\nconst plugins = pluginsFactory;\nconst commands = { queryFatalError, hardResetClient, queryCollabState };\n/**\n *\n * @param param0\n * @param param0.requestTimeout - timeout for the requests to the server.\n * @param param0.cooldownTime - time to wait before retrying after failure.\n * @param param0.warmupTime - time to wait before starting the collab session. Use this to avoid a bunch\n *                            of redundant getDocument request if you editor state\n *                            is modified a bunch of time on startup.\n */\nfunction pluginsFactory({ requestTimeout, clientID = 'client-' + uuid(), collabMessageBus, docName, managerId = DEFAULT_MANAGER_ID, cooldownTime = 100, warmupTime = 0, }) {\n    const userId = 'user-' + clientID;\n    return [\n        collab({\n            clientID,\n        }),\n        collabClientPlugin({\n            requestTimeout,\n            clientID,\n            collabMessageBus,\n            docName,\n            managerId,\n            cooldownTime,\n            userId,\n            warmupTime,\n        }),\n    ];\n}\n\nvar collabExtension = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    plugins: plugins,\n    commands: commands\n});\n\nexport { collabExtension as collabClient };\n"],
  "mappings": "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",
  "names": ["collab", "EventType", "FatalErrorCode", "CollabStateName", "view", "pluginState"]
}

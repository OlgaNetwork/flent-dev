{
  "version": 3,
  "sources": ["../../../.yarn/__virtual__/@bangle.dev-react-emoji-suggest-virtual-f63d647616/5/Users/ted/.yarn/berry/cache/@bangle.dev-react-emoji-suggest-npm-0.32.0-4a302f7e9e-10c0.zip/node_modules/@bangle.dev/react-emoji-suggest/dist/index.js"],
  "sourcesContent": ["import { PluginKey } from '@bangle.dev/pm';\nimport { suggestTooltip, createTooltipDOM } from '@bangle.dev/tooltip';\nimport { bangleWarn, uuid, valuePlugin, rafCommandExec, getNodeType } from '@bangle.dev/utils';\nimport React, { useMemo, useCallback } from 'react';\nimport reactDOM from 'react-dom';\nimport { useEditorViewContext, usePluginState } from '@bangle.dev/react';\n\nconst emptyValue = { item: undefined, coords: undefined };\n/**\n * Converted 2d coordinates in a flat 1d integer referred everywhere as counter.\n */\nfunction coordsToCounter(coords, namedGroups) {\n    const groups = flattenEmojiGroups(namedGroups);\n    let counter = 0;\n    for (let i = 0; i < coords[0]; i++) {\n        counter += groups[i].length;\n    }\n    counter += coords[1];\n    return counter;\n}\nfunction counterToCoords(counter, namedGroups) {\n    const groups = flattenEmojiGroups(namedGroups);\n    let normalizedCounter = normalizeCounter(counter, groups);\n    if (normalizedCounter == null) {\n        return;\n    }\n    for (let i = 0; i < groups.length; i++) {\n        const size = groups[i].length;\n        if (normalizedCounter < size) {\n            return [i, normalizedCounter];\n        }\n        normalizedCounter = normalizedCounter - size;\n    }\n    return;\n}\nfunction resolveCounter(counter, namedGroups) {\n    const coords = counterToCoords(counter, namedGroups);\n    if (!coords) {\n        return emptyValue;\n    }\n    const groups = flattenEmojiGroups(namedGroups);\n    return { item: groups[coords[0]][coords[1]], coords: coords };\n}\n/**\n * Helps calculate the position resulting from a jump between rows\n * @returns a new counter\n */\nfunction resolveRowJump(counter, direction = 1, jump, namedGroups) {\n    const { coords } = jumpRow(counter, direction, jump, namedGroups);\n    if (coords == null) {\n        return null;\n    }\n    return coordsToCounter(coords, namedGroups);\n}\nfunction getNextGroup(groupIndex, groups, direction = 1) {\n    let newIndex = groupIndex + direction;\n    if (groups.length === 0) {\n        return;\n    }\n    while (newIndex < 0) {\n        newIndex += groups.length;\n    }\n    newIndex = newIndex % groups.length;\n    return newIndex;\n}\nfunction getSquareDimensions({ rowWidth, squareMargin, squareSide, }) {\n    const squareFullWidth = squareSide + 2 * squareMargin;\n    // -2 to account for borders and safety\n    const rowCount = Math.floor((rowWidth - 2) / squareFullWidth);\n    const containerWidth = rowCount * squareFullWidth;\n    return {\n        containerWidth,\n        rowCount,\n    };\n}\nfunction jumpRow(counter, direction = 1, jump, namedGroups) {\n    const coords = counterToCoords(counter, namedGroups);\n    if (!coords) {\n        return emptyValue;\n    }\n    const groups = flattenEmojiGroups(namedGroups);\n    const groupIndex = coords[0];\n    const itemIndex = coords[1];\n    const groupSize = groups[groupIndex].length;\n    const newIndex = direction === 1 ? itemIndex + jump : itemIndex - jump;\n    if (newIndex < groupSize && newIndex >= 0) {\n        return {\n            item: groups[groupIndex][newIndex],\n            coords: [groupIndex, newIndex],\n        };\n    }\n    const nextGroupIndex = getNextGroup(groupIndex, groups, newIndex >= groupSize ? 1 : -1);\n    if (nextGroupIndex == null) {\n        return emptyValue;\n    }\n    const nextGroup = groups[nextGroupIndex];\n    const nextItemIndex = direction === 1 ? 0 : nextGroup.length - 1;\n    const item = nextGroup[nextItemIndex];\n    if (item == null) {\n        return emptyValue;\n    }\n    return {\n        item,\n        coords: [nextGroupIndex, nextItemIndex],\n    };\n}\nfunction flattenEmojiGroups(namedGroups) {\n    return namedGroups.map((r) => r.emojis);\n}\nfunction normalizeCounter(counter, groups) {\n    const totalSize = groups.reduce((prev, cur) => prev + cur.length, 0);\n    if (totalSize === 0) {\n        return;\n    }\n    while (counter < 0) {\n        counter += totalSize;\n    }\n    counter = counter % totalSize;\n    return counter;\n}\n\nconst { decrementSuggestTooltipCounter, incrementSuggestTooltipCounter, updateSuggestTooltipCounter, removeSuggestMark, resetSuggestTooltipCounter, defaultKeys, } = suggestTooltip;\nconst spec = specFactory;\nconst plugins = pluginsFactory;\nconst commands = {\n    queryTriggerText,\n    selectEmoji,\n};\nconst defaultTrigger = ':';\nconst defaultMaxItems = 2000;\nfunction specFactory({ markName, trigger = defaultTrigger, }) {\n    const spec = suggestTooltip.spec({ markName, trigger });\n    return {\n        ...spec,\n        options: {\n            trigger,\n        },\n    };\n}\nfunction pluginsFactory({ key = new PluginKey('emojiSuggestMenu'), markName, tooltipRenderOpts = {}, getEmojiGroups, maxItems = defaultMaxItems, squareSide = 32, squareMargin = 2, rowWidth = 400, }) {\n    return ({ schema, specRegistry, }) => {\n        const { trigger } = specRegistry.options[markName];\n        const suggestTooltipKey = new PluginKey('suggestTooltipKey');\n        // We are converting to DOM elements so that their instances\n        // can be shared across plugins.\n        const tooltipDOMSpec = createTooltipDOM(tooltipRenderOpts.tooltipDOMSpec);\n        const getIsTop = () => tooltipDOMSpec.dom.getAttribute('data-popper-placement') === 'top-start';\n        if (!schema.marks[markName]) {\n            bangleWarn(`Couldn't find the markName:${markName}, please make sure you have initialized to use the same markName you initialized the spec with`);\n            throw new Error(`markName ${markName} not found`);\n        }\n        const selectedEmojiSquareId = uuid(6);\n        const updateCounter = (keyType) => {\n            return (state, dispatch, view) => {\n                requestAnimationFrame(() => {\n                    const selectedEmoji = document.getElementById(selectedEmojiSquareId);\n                    if (selectedEmoji) {\n                        if ('scrollIntoViewIfNeeded' in document.body) {\n                            selectedEmoji.scrollIntoViewIfNeeded(false);\n                        }\n                        else if (selectedEmoji.scrollIntoView) {\n                            selectedEmoji.scrollIntoView(false);\n                        }\n                    }\n                    view === null || view === void 0 ? void 0 : view.focus();\n                });\n                if (keyType === 'LEFT') {\n                    return decrementSuggestTooltipCounter(suggestTooltipKey)(state, dispatch, view);\n                }\n                if (keyType === 'RIGHT') {\n                    return incrementSuggestTooltipCounter(suggestTooltipKey)(state, dispatch, view);\n                }\n                const goUp = keyType === 'UP' ? !getIsTop() : getIsTop();\n                const namedEmojiGroups = getEmojiGroups(queryTriggerText(key)(state));\n                const { counter } = suggestTooltipKey.getState(state);\n                const { rowCount } = getSquareDimensions({\n                    rowWidth,\n                    squareMargin,\n                    squareSide,\n                });\n                const newCounter = resolveRowJump(counter, goUp ? -1 : 1, rowCount, namedEmojiGroups);\n                if (newCounter == null) {\n                    return false;\n                }\n                return updateSuggestTooltipCounter(suggestTooltipKey, newCounter)(state, dispatch, view);\n            };\n        };\n        return [\n            valuePlugin(key, {\n                getEmojiGroups,\n                maxItems,\n                tooltipContentDOM: tooltipDOMSpec.contentDOM,\n                markName,\n                squareSide,\n                squareMargin,\n                selectedEmojiSquareId,\n                rowWidth,\n                suggestTooltipKey,\n            }),\n            suggestTooltip.plugins({\n                key: suggestTooltipKey,\n                markName,\n                trigger,\n                tooltipRenderOpts: {\n                    ...tooltipRenderOpts,\n                    tooltipDOMSpec,\n                },\n                keybindings: {\n                    ...defaultKeys,\n                    left: 'ArrowLeft',\n                    right: 'ArrowRight',\n                },\n                onEnter: (state, dispatch, view) => {\n                    const emojiGroups = getEmojiGroups(queryTriggerText(key)(state));\n                    const matchedEmojis = emojiGroups.flatMap((r) => r.emojis);\n                    if (matchedEmojis.length === 0) {\n                        return removeSuggestMark(key)(state, dispatch, view);\n                    }\n                    const { counter } = suggestTooltipKey.getState(state);\n                    const { item: activeItem } = resolveCounter(counter, emojiGroups);\n                    if (!activeItem) {\n                        return removeSuggestMark(key)(state, dispatch, view);\n                    }\n                    const emojiAlias = activeItem[0];\n                    view &&\n                        rafCommandExec(view, resetSuggestTooltipCounter(suggestTooltipKey));\n                    return selectEmoji(key, emojiAlias)(state, dispatch, view);\n                },\n                onArrowDown: updateCounter('DOWN'),\n                onArrowUp: updateCounter('UP'),\n                onArrowLeft: updateCounter('LEFT'),\n                onArrowRight: updateCounter('RIGHT'),\n            }),\n        ];\n    };\n}\nfunction getSuggestTooltipKey(key) {\n    return (state) => {\n        return key.getState(state).suggestTooltipKey;\n    };\n}\n/** Commands */\nfunction queryTriggerText(key) {\n    return (state) => {\n        const suggestKey = getSuggestTooltipKey(key)(state);\n        return suggestTooltip.queryTriggerText(suggestKey)(state);\n    };\n}\nfunction selectEmoji(key, emojiAlias) {\n    return (state, dispatch, view) => {\n        const emojiNode = getNodeType(state, 'emoji').create({\n            emojiAlias: emojiAlias,\n        });\n        const suggestKey = getSuggestTooltipKey(key)(state);\n        return suggestTooltip.replaceSuggestMarkWith(suggestKey, emojiNode)(state, dispatch, view);\n    };\n}\n\nvar emojiSuggest = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    spec: spec,\n    plugins: plugins,\n    commands: commands,\n    getSuggestTooltipKey: getSuggestTooltipKey,\n    queryTriggerText: queryTriggerText,\n    selectEmoji: selectEmoji\n});\n\nfunction EmojiSuggest({ emojiSuggestKey, }) {\n    const view = useEditorViewContext();\n    const { tooltipContentDOM, getEmojiGroups, maxItems, squareSide, squareMargin, rowWidth, selectedEmojiSquareId, suggestTooltipKey, } = usePluginState(emojiSuggestKey);\n    const { counter, triggerText, show: isVisible, } = usePluginState(suggestTooltipKey);\n    return reactDOM.createPortal(React.createElement(\"div\", { className: \"bangle-emoji-suggest\" },\n        React.createElement(\"div\", { style: {\n                width: rowWidth,\n                display: 'flex',\n                justifyContent: 'center',\n            } }, isVisible && (React.createElement(EmojiSuggestContainer, { view: view, rowWidth: rowWidth, squareMargin: squareMargin, squareSide: squareSide, maxItems: maxItems, emojiSuggestKey: emojiSuggestKey, getEmojiGroups: getEmojiGroups, triggerText: triggerText, counter: counter, selectedEmojiSquareId: selectedEmojiSquareId })))), tooltipContentDOM);\n}\nfunction EmojiSuggestContainer({ view, rowWidth, squareMargin, squareSide, emojiSuggestKey, getEmojiGroups, triggerText, counter, selectedEmojiSquareId, maxItems, }) {\n    const emojiGroups = useMemo(() => getEmojiGroups(triggerText), [getEmojiGroups, triggerText]);\n    const { containerWidth } = getSquareDimensions({\n        rowWidth,\n        squareMargin,\n        squareSide,\n    });\n    const { item: activeItem } = resolveCounter(counter, emojiGroups);\n    const onSelectEmoji = useCallback((emojiAlias) => {\n        selectEmoji(emojiSuggestKey, emojiAlias)(view.state, view.dispatch, view);\n    }, [view, emojiSuggestKey]);\n    return (React.createElement(\"div\", { className: \"bangle-emoji-suggest-container\", style: {\n            width: containerWidth,\n        } }, emojiGroups.map(({ name: groupName, emojis }, i) => {\n        return (React.createElement(\"div\", { className: \"bangle-emoji-suggest-group\", key: groupName || i },\n            groupName && React.createElement(\"span\", null, groupName),\n            React.createElement(\"div\", null, emojis.slice(0, maxItems).map(([emojiAlias, emoji]) => (React.createElement(EmojiSquare, { key: emojiAlias, isSelected: (activeItem === null || activeItem === void 0 ? void 0 : activeItem[0]) === emojiAlias, emoji: emoji, emojiAlias: emojiAlias, onSelectEmoji: onSelectEmoji, selectedEmojiSquareId: selectedEmojiSquareId, style: {\n                    margin: squareMargin,\n                    width: squareSide,\n                    height: squareSide,\n                    lineHeight: squareSide + 'px',\n                    fontSize: Math.max(squareSide - 7, 4),\n                } }))))));\n    })));\n}\nfunction EmojiSquare({ isSelected, emoji, emojiAlias, onSelectEmoji, style, selectedEmojiSquareId, }) {\n    return (React.createElement(\"button\", { className: `bangle-emoji-square ${isSelected ? 'bangle-is-selected' : ''}`, id: isSelected ? selectedEmojiSquareId : undefined, onClick: (e) => {\n            e.preventDefault();\n            onSelectEmoji(emojiAlias);\n        }, style: style }, emoji));\n}\n\nexport { EmojiSuggest, EmojiSuggestContainer, emojiSuggest, getSquareDimensions, resolveCounter, resolveRowJump, selectEmoji };\n"],
  "mappings": "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",
  "names": ["spec", "reactDOM", "React"]
}

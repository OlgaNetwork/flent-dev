import "./chunk-AUZ3RYOM.js";

// ../../../../Users/ted/.yarn/berry/cache/@bangle.io-config-template-npm-0.0.7-950b90700c-10c0.zip/node_modules/@bangle.io/config-template/dist/bangle-io-config-template.mjs
var p = Object.defineProperty;
var g = (s, e, i) => e in s ? p(s, e, { enumerable: true, configurable: true, writable: true, value: i }) : s[e] = i;
var r = (s, e, i) => (g(s, typeof e != "symbol" ? e + "" : e, i), i);
var b = [
  "appEnv",
  "buildTime",
  "commitHash",
  "deployBranch",
  "hot",
  "netlifyBuildContext",
  "nodeEnv",
  "releaseId",
  "releaseVersion",
  "storybook"
];
var c = ["helpDocsVersion", "changelogText"];
var h = ["writeSlowDown"];
function u(s, e, i) {
  if (Object.keys(s).length !== e.length) {
    const n = e.find((t) => !(t in s));
    throw console.log(Object.keys(s), e), new Error(`${i} has a missing key ${n}`);
  }
  for (const [n, t] of Object.entries(s)) {
    if (!e.includes(n))
      throw new Error(`Unknown ${i} field: ${n}`);
    if (t === void 0)
      throw new Error(`${i} field ${n} is undefined`);
  }
}
var l = class _l {
  constructor(e = {}) {
    r(this, "build");
    r(this, "app");
    r(this, "debug");
    this.build = e.build || {}, this.app = e.app || {}, this.debug = e.debug || {};
  }
  static fromJSONString(e) {
    const { build: i, app: n, debug: t } = JSON.parse(e);
    return new _l({ app: n, build: i, debug: t });
  }
  serialize() {
    const e = {
      build: this.build,
      app: this.app,
      debug: this.debug
    };
    return JSON.stringify(e);
  }
  finalize() {
    return u(this.build, b, "build"), u(this.app, c, "app"), Object.keys(this.debug).length > 0 && u(this.debug, h, "debug"), {
      app: this.app,
      build: this.build,
      debug: Object.keys(this.debug).length > 0 ? this.debug : void 0
    };
  }
  merge(e) {
    const i = { ...this.build, ...e.build }, n = { ...this.app, ...e.app }, t = { ...this.debug, ...e.debug };
    return new _l({ build: i, app: n, debug: t });
  }
  print(e = "config") {
    const i = (d) => JSON.parse(
      JSON.stringify(d, (a, o) => typeof o == "string" && o.length > 20 ? o.substring(0, 20) + "..." : o)
    ), n = console.group ? console.group : console.log, t = console.groupEnd ? console.groupEnd : console.log;
    n(e), console.table(i(this.app)), console.table(i(this.build)), console.table(i(this.debug)), t();
  }
};
export {
  l as BangleConfig
};
//# sourceMappingURL=@bangle__io_config-template.js.map

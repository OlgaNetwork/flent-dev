{
  "version": 3,
  "sources": ["../../../.yarn/__virtual__/@react-aria-listbox-virtual-fc9e933476/5/Users/ted/.yarn/berry/cache/@react-aria-listbox-npm-3.11.1-6c8255bda5-10c0.zip/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/index.ts", "../../../.yarn/__virtual__/@react-aria-listbox-virtual-fc9e933476/5/Users/ted/.yarn/berry/cache/@react-aria-listbox-npm-3.11.1-6c8255bda5-10c0.zip/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/useListBox.ts", "../../../.yarn/__virtual__/@react-aria-listbox-virtual-fc9e933476/5/Users/ted/.yarn/berry/cache/@react-aria-listbox-npm-3.11.1-6c8255bda5-10c0.zip/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/utils.ts", "../../../.yarn/__virtual__/@react-aria-listbox-virtual-fc9e933476/5/Users/ted/.yarn/berry/cache/@react-aria-listbox-npm-3.11.1-6c8255bda5-10c0.zip/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/useOption.ts", "../../../.yarn/__virtual__/@react-aria-listbox-virtual-fc9e933476/5/Users/ted/.yarn/berry/cache/@react-aria-listbox-npm-3.11.1-6c8255bda5-10c0.zip/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/useListBoxSection.ts"],
  "sourcesContent": ["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useListBox} from './useListBox';\nexport {useOption} from './useOption';\nexport {useListBoxSection} from './useListBoxSection';\nexport {listData, getItemId} from './utils';\n\nexport type {AriaListBoxProps} from '@react-types/listbox';\nexport type {AriaListBoxOptions, ListBoxAria} from './useListBox';\nexport type {AriaOptionProps, OptionAria} from './useOption';\nexport type {AriaListBoxSectionProps, ListBoxSectionAria} from './useListBoxSection';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {RefObject} from 'react';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: DOMAttributes,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: DOMAttributes\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * The behavior of links in the collection.\n   * - 'action': link behaves like onAction.\n   * - 'selection': link follows selection interactions (e.g. if URL drives selection).\n   * - 'override': links override all other interactions (link items are not selectable).\n   * @default 'override'\n   */\n  linkBehavior?: 'action' | 'selection' | 'override'\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  // Use props instead of state here. We don't want this to change due to long press.\n  let selectionBehavior = props.selectionBehavior || 'toggle';\n  let linkBehavior = props.linkBehavior || (selectionBehavior === 'replace' ? 'action' : 'override');\n  if (selectionBehavior === 'toggle' && linkBehavior === 'action') {\n    // linkBehavior=\"action\" does not work with selectionBehavior=\"toggle\" because there is no way\n    // to initiate selection (checkboxes are not allowed inside a listbox). Link items will not be\n    // selectable in this configuration.\n    linkBehavior = 'override';\n  }\n\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    linkBehavior\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction,\n    linkBehavior\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {ListState} from '@react-stately/list';\n\ninterface ListData {\n  id: string,\n  shouldSelectOnPressUp?: boolean,\n  shouldFocusOnHover?: boolean,\n  shouldUseVirtualFocus?: boolean,\n  isVirtualized?: boolean,\n  onAction?: (key: Key) => void,\n  linkBehavior?: 'action' | 'selection' | 'override'\n}\n\nexport const listData = new WeakMap<ListState<unknown>, ListData>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let data = listData.get(state);\n\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n\n  return `${data.id}-option-${normalizeKey(itemKey)}`;\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {filterDOMProps, isMac, isWebKit, mergeProps, useSlotId} from '@react-aria/utils';\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {isFocusVisible, useHover} from '@react-aria/interactions';\nimport {Key, RefObject} from 'react';\nimport {ListState} from '@react-stately/list';\nimport {SelectableItemStates, useSelectableItem} from '@react-aria/selection';\n\nexport interface OptionAria extends SelectableItemStates {\n  /** Props for the option element. */\n  optionProps: DOMAttributes,\n\n  /** Props for the main text element inside the option. */\n  labelProps: DOMAttributes,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: DOMAttributes,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean,\n\n  /** Whether the option is keyboard focused. */\n  isFocusVisible: boolean\n}\n\nexport interface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<FocusableElement>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data?.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data?.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data?.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data?.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled || undefined,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  let item = state.collection.getItem(key);\n  if (isVirtualized) {\n    let index = Number(item?.index);\n    optionProps['aria-posinset'] = Number.isNaN(index) ? undefined : index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps, isPressed, isFocused, hasAction, allowsSelection} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    isDisabled,\n    onAction: data?.onAction ? () => data?.onAction?.(key) : undefined,\n    linkBehavior: data?.linkBehavior\n  });\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  let domProps = filterDOMProps(item?.props, {isLink: !!item?.props?.href});\n  delete domProps.id;\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(domProps, itemProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isFocusVisible: isFocused && isFocusVisible(),\n    isSelected,\n    isDisabled,\n    isPressed,\n    allowsSelection,\n    hasAction\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\nexport interface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\nexport interface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: DOMAttributes,\n\n  /** Props for the heading element, if any. */\n  headingProps: DOMAttributes,\n\n  /** Props for the group element. */\n  groupProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, using role=\"presentation\",\n      // and only use it as a visual label for the nested group.\n      id: headingId,\n      role: 'presentation'\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../.yarn/__virtual__/@bangle.dev-markdown-front-matter-virtual-654838ab1f/5/Users/ted/.yarn/berry/cache/@bangle.dev-markdown-front-matter-npm-0.32.0-e98f99cbe4-10c0.zip/node_modules/@bangle.dev/markdown-front-matter/dist/index.js"],
  "sourcesContent": ["import { domSerializationHelpers } from '@bangle.dev/core';\n\nconst spec = specFactory;\nconst name = 'markdownFrontMatter';\nfunction specFactory() {\n    const spec = {\n        type: 'node',\n        name: name,\n        schema: {\n            group: 'frontMatter',\n            atom: true,\n            isolating: true,\n            attrs: {\n                data: {\n                    default: '',\n                },\n            },\n        },\n        markdown: {\n            toMarkdown(state, node) {\n                state.write('---\\n');\n                state.text(node.attrs['data'], false);\n                state.write('\\n---');\n                state.closeBlock(node);\n            },\n            parseMarkdown: {\n                front_matter: {\n                    block: name,\n                    getAttrs: (tok) => {\n                        if (typeof tok.meta === 'string') {\n                            return { data: tok.meta };\n                        }\n                        return null;\n                    },\n                    noCloseToken: true,\n                },\n            },\n        },\n    };\n    spec.schema = {\n        ...spec.schema,\n        ...domSerializationHelpers(name, {\n            tag: 'div',\n            content: (node) => node.attrs['data'],\n            parsingPriority: 52,\n        }),\n    };\n    return spec;\n}\n\nvar markdownFrontMatter = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    spec: spec\n});\n\nfunction frontMatterPlugin(md, cb = (arg) => { }) {\n    var min_markers = 3, marker_str = '-', marker_char = marker_str.charCodeAt(0), marker_len = marker_str.length;\n    function frontMatter(state, startLine, endLine, silent) {\n        var pos, nextLine, marker_count, token, old_parent, old_line_max, start_content, auto_closed = false, start = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];\n        // Check out the first character of the first line quickly,\n        // this should filter out non-front matter\n        if (startLine !== 0 || marker_char !== state.src.charCodeAt(0)) {\n            return false;\n        }\n        // Check out the rest of the marker string\n        // while pos <= 3\n        for (pos = start + 1; pos <= max; pos++) {\n            if (marker_str[(pos - start) % marker_len] !== state.src[pos]) {\n                start_content = pos + 1;\n                break;\n            }\n        }\n        marker_count = Math.floor((pos - start) / marker_len);\n        if (marker_count < min_markers) {\n            return false;\n        }\n        pos -= (pos - start) % marker_len;\n        // Since start is found, we can report success here in validation mode\n        if (silent) {\n            return true;\n        }\n        // Search for the end of the block\n        nextLine = startLine;\n        for (;;) {\n            nextLine++;\n            if (nextLine >= endLine) {\n                // unclosed block should be autoclosed by end of document.\n                // also block seems to be autoclosed by end of parent\n                break;\n            }\n            if (state.src.slice(start, max) === '...') {\n                break;\n            }\n            start = state.bMarks[nextLine] + state.tShift[nextLine];\n            max = state.eMarks[nextLine];\n            if (start < max && state.sCount[nextLine] < state.blkIndent) {\n                // non-empty line with negative indent should stop the list:\n                // - ```\n                //  test\n                break;\n            }\n            if (marker_char !== state.src.charCodeAt(start)) {\n                continue;\n            }\n            if (state.sCount[nextLine] - state.blkIndent >= 4) {\n                // closing fence should be indented less than 4 spaces\n                continue;\n            }\n            for (pos = start + 1; pos <= max; pos++) {\n                if (marker_str[(pos - start) % marker_len] !== state.src[pos]) {\n                    break;\n                }\n            }\n            // closing code fence must be at least as long as the opening one\n            if (Math.floor((pos - start) / marker_len) < marker_count) {\n                continue;\n            }\n            // make sure tail has spaces only\n            pos -= (pos - start) % marker_len;\n            pos = state.skipSpaces(pos);\n            if (pos < max) {\n                continue;\n            }\n            // found!\n            auto_closed = true;\n            break;\n        }\n        old_parent = state.parentType;\n        old_line_max = state.lineMax;\n        state.parentType = 'container';\n        // this will prevent lazy continuations from ever going past our end marker\n        state.lineMax = nextLine;\n        token = state.push('front_matter', null, 0);\n        token.hidden = true;\n        token.markup = state.src.slice(startLine, pos);\n        token.block = true;\n        token.map = [startLine, pos];\n        token.meta = state.src.slice(start_content, start - 1);\n        state.parentType = old_parent;\n        state.lineMax = old_line_max;\n        state.line = nextLine + (auto_closed ? 1 : 0);\n        cb(token.meta);\n        return true;\n    }\n    md.block.ruler.before('fence', 'front_matter', frontMatter, {\n        alt: ['paragraph', 'reference', 'blockquote', 'list'],\n    });\n}\n\nexport { frontMatterPlugin as frontMatterMarkdownItPlugin, markdownFrontMatter };\n"],
  "mappings": ";;;;;;;;;AAEA,IAAM,OAAO;AACb,IAAM,OAAO;AACb,SAAS,cAAc;AACnB,QAAMA,QAAO;AAAA,IACT,MAAM;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,MACJ,OAAO;AAAA,MACP,MAAM;AAAA,MACN,WAAW;AAAA,MACX,OAAO;AAAA,QACH,MAAM;AAAA,UACF,SAAS;AAAA,QACb;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,MACN,WAAW,OAAO,MAAM;AACpB,cAAM,MAAM,OAAO;AACnB,cAAM,KAAK,KAAK,MAAM,MAAM,GAAG,KAAK;AACpC,cAAM,MAAM,OAAO;AACnB,cAAM,WAAW,IAAI;AAAA,MACzB;AAAA,MACA,eAAe;AAAA,QACX,cAAc;AAAA,UACV,OAAO;AAAA,UACP,UAAU,CAAC,QAAQ;AACf,gBAAI,OAAO,IAAI,SAAS,UAAU;AAC9B,qBAAO,EAAE,MAAM,IAAI,KAAK;AAAA,YAC5B;AACA,mBAAO;AAAA,UACX;AAAA,UACA,cAAc;AAAA,QAClB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACA,EAAAA,MAAK,SAAS;AAAA,IACV,GAAGA,MAAK;AAAA,IACR,GAAG,wBAAwB,MAAM;AAAA,MAC7B,KAAK;AAAA,MACL,SAAS,CAAC,SAAS,KAAK,MAAM,MAAM;AAAA,MACpC,iBAAiB;AAAA,IACrB,CAAC;AAAA,EACL;AACA,SAAOA;AACX;AAEA,IAAI,sBAAmC,OAAO,OAAO;AAAA,EACjD,WAAW;AAAA,EACX;AACJ,CAAC;AAED,SAAS,kBAAkB,IAAI,KAAK,CAAC,QAAQ;AAAE,GAAG;AAC9C,MAAI,cAAc,GAAG,aAAa,KAAK,cAAc,WAAW,WAAW,CAAC,GAAG,aAAa,WAAW;AACvG,WAAS,YAAY,OAAO,WAAW,SAAS,QAAQ;AACpD,QAAI,KAAK,UAAU,cAAc,OAAO,YAAY,cAAc,eAAe,cAAc,OAAO,QAAQ,MAAM,OAAO,SAAS,IAAI,MAAM,OAAO,SAAS,GAAG,MAAM,MAAM,OAAO,SAAS;AAG7L,QAAI,cAAc,KAAK,gBAAgB,MAAM,IAAI,WAAW,CAAC,GAAG;AAC5D,aAAO;AAAA,IACX;AAGA,SAAK,MAAM,QAAQ,GAAG,OAAO,KAAK,OAAO;AACrC,UAAI,YAAY,MAAM,SAAS,UAAU,MAAM,MAAM,IAAI,GAAG,GAAG;AAC3D,wBAAgB,MAAM;AACtB;AAAA,MACJ;AAAA,IACJ;AACA,mBAAe,KAAK,OAAO,MAAM,SAAS,UAAU;AACpD,QAAI,eAAe,aAAa;AAC5B,aAAO;AAAA,IACX;AACA,YAAQ,MAAM,SAAS;AAEvB,QAAI,QAAQ;AACR,aAAO;AAAA,IACX;AAEA,eAAW;AACX,eAAS;AACL;AACA,UAAI,YAAY,SAAS;AAGrB;AAAA,MACJ;AACA,UAAI,MAAM,IAAI,MAAM,OAAO,GAAG,MAAM,OAAO;AACvC;AAAA,MACJ;AACA,cAAQ,MAAM,OAAO,QAAQ,IAAI,MAAM,OAAO,QAAQ;AACtD,YAAM,MAAM,OAAO,QAAQ;AAC3B,UAAI,QAAQ,OAAO,MAAM,OAAO,QAAQ,IAAI,MAAM,WAAW;AAIzD;AAAA,MACJ;AACA,UAAI,gBAAgB,MAAM,IAAI,WAAW,KAAK,GAAG;AAC7C;AAAA,MACJ;AACA,UAAI,MAAM,OAAO,QAAQ,IAAI,MAAM,aAAa,GAAG;AAE/C;AAAA,MACJ;AACA,WAAK,MAAM,QAAQ,GAAG,OAAO,KAAK,OAAO;AACrC,YAAI,YAAY,MAAM,SAAS,UAAU,MAAM,MAAM,IAAI,GAAG,GAAG;AAC3D;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,KAAK,OAAO,MAAM,SAAS,UAAU,IAAI,cAAc;AACvD;AAAA,MACJ;AAEA,cAAQ,MAAM,SAAS;AACvB,YAAM,MAAM,WAAW,GAAG;AAC1B,UAAI,MAAM,KAAK;AACX;AAAA,MACJ;AAEA,oBAAc;AACd;AAAA,IACJ;AACA,iBAAa,MAAM;AACnB,mBAAe,MAAM;AACrB,UAAM,aAAa;AAEnB,UAAM,UAAU;AAChB,YAAQ,MAAM,KAAK,gBAAgB,MAAM,CAAC;AAC1C,UAAM,SAAS;AACf,UAAM,SAAS,MAAM,IAAI,MAAM,WAAW,GAAG;AAC7C,UAAM,QAAQ;AACd,UAAM,MAAM,CAAC,WAAW,GAAG;AAC3B,UAAM,OAAO,MAAM,IAAI,MAAM,eAAe,QAAQ,CAAC;AACrD,UAAM,aAAa;AACnB,UAAM,UAAU;AAChB,UAAM,OAAO,YAAY,cAAc,IAAI;AAC3C,OAAG,MAAM,IAAI;AACb,WAAO;AAAA,EACX;AACA,KAAG,MAAM,MAAM,OAAO,SAAS,gBAAgB,aAAa;AAAA,IACxD,KAAK,CAAC,aAAa,aAAa,cAAc,MAAM;AAAA,EACxD,CAAC;AACL;",
  "names": ["spec"]
}

import {
  require_shim
} from "./chunk-Y2DNC65D.js";
import {
  makeMatcher
} from "./chunk-LLQGNO42.js";
import {
  require_react
} from "./chunk-UAYAVOPY.js";
import {
  __toESM
} from "./chunk-AUZ3RYOM.js";

// .yarn/__virtual__/wouter-virtual-58e9ce29b6/5/Users/ted/.yarn/berry/cache/wouter-npm-2.12.1-05aa0e4598-10c0.zip/node_modules/wouter/react-deps.js
var React = __toESM(require_react(), 1);
var import_react = __toESM(require_react(), 1);

// .yarn/__virtual__/wouter-virtual-58e9ce29b6/5/Users/ted/.yarn/berry/cache/wouter-npm-2.12.1-05aa0e4598-10c0.zip/node_modules/wouter/use-sync-external-store.js
var import_shim = __toESM(require_shim(), 1);

// .yarn/__virtual__/wouter-virtual-58e9ce29b6/5/Users/ted/.yarn/berry/cache/wouter-npm-2.12.1-05aa0e4598-10c0.zip/node_modules/wouter/react-deps.js
var {
  useEffect,
  useLayoutEffect,
  useRef,
  useInsertionEffect: useBuiltinInsertionEffect
} = React;
var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
var useIsomorphicLayoutEffect = canUseDOM ? useLayoutEffect : useEffect;
var useInsertionEffect = useBuiltinInsertionEffect || useIsomorphicLayoutEffect;
var useEvent = (fn) => {
  const ref = useRef([fn, (...args) => ref[0](...args)]).current;
  useInsertionEffect(() => {
    ref[0] = fn;
  });
  return ref[1];
};

// .yarn/__virtual__/wouter-virtual-58e9ce29b6/5/Users/ted/.yarn/berry/cache/wouter-npm-2.12.1-05aa0e4598-10c0.zip/node_modules/wouter/paths.js
var relativePath = (base = "", path = location.pathname) => !path.toLowerCase().indexOf(base.toLowerCase()) ? path.slice(base.length) || "/" : "~" + path;
var absolutePath = (to, base = "") => to[0] === "~" ? to.slice(1) : base + to;

// .yarn/__virtual__/wouter-virtual-58e9ce29b6/5/Users/ted/.yarn/berry/cache/wouter-npm-2.12.1-05aa0e4598-10c0.zip/node_modules/wouter/use-location.js
var eventPopstate = "popstate";
var eventPushState = "pushState";
var eventReplaceState = "replaceState";
var eventHashchange = "hashchange";
var events = [
  eventPopstate,
  eventPushState,
  eventReplaceState,
  eventHashchange
];
var subscribeToLocationUpdates = (callback) => {
  for (const event of events) {
    addEventListener(event, callback);
  }
  return () => {
    for (const event of events) {
      removeEventListener(event, callback);
    }
  };
};
var useLocationProperty = (fn, ssrFn) => (0, import_shim.useSyncExternalStore)(subscribeToLocationUpdates, fn, ssrFn);
var currentPathname = () => location.pathname;
var usePathname = ({ ssrPath } = {}) => useLocationProperty(
  currentPathname,
  ssrPath ? () => ssrPath : currentPathname
);
var navigate = (to, { replace = false } = {}) => history[replace ? eventReplaceState : eventPushState](null, "", to);
var useLocation = (opts = {}) => [
  relativePath(opts.base, usePathname(opts)),
  useEvent((to, navOpts) => navigate(absolutePath(to, opts.base), navOpts))
];
var use_location_default = useLocation;
if (typeof history !== "undefined") {
  for (const type of [eventPushState, eventReplaceState]) {
    const original = history[type];
    history[type] = function() {
      const result = original.apply(this, arguments);
      const event = new Event(type);
      event.arguments = arguments;
      dispatchEvent(event);
      return result;
    };
  }
}

// .yarn/__virtual__/wouter-virtual-58e9ce29b6/5/Users/ted/.yarn/berry/cache/wouter-npm-2.12.1-05aa0e4598-10c0.zip/node_modules/wouter/index.js
var defaultRouter = {
  hook: use_location_default,
  matcher: makeMatcher(),
  base: ""
  // this option is used to override the current location during SSR
  // ssrPath: undefined,
};
var RouterCtx = (0, import_react.createContext)(defaultRouter);
var useRouter = () => (0, import_react.useContext)(RouterCtx);
var useLocationFromRouter = (router) => router.hook(router);
var useLocation2 = () => useLocationFromRouter(useRouter());
var useRoute = (pattern) => {
  const router = useRouter();
  const [path] = useLocationFromRouter(router);
  return router.matcher(pattern, path);
};
var ParamsCtx = (0, import_react.createContext)({ params: {} });
var useParams = () => (0, import_react.useContext)(ParamsCtx).params;
var Router = ({
  hook,
  matcher,
  ssrPath,
  base = "",
  parent,
  children
}) => {
  const updateRouter = (router, proto = parent || defaultRouter) => {
    router.hook = hook || proto.hook;
    router.matcher = matcher || proto.matcher;
    router.ssrPath = ssrPath || proto.ssrPath;
    router.ownBase = base;
    router.parent = parent;
    return router;
  };
  const [value] = (0, import_react.useState)(
    () => updateRouter({
      // We must store base as a property accessor because effects
      // somewhat counter-intuitively run in child components *first*!
      // This means that by the time a parent's base is updated in the
      // parent effect, the child effect has already run, and saw
      // the parent's *previous* base during its own execution.
      get base() {
        return (value.parent || defaultRouter).base + value.ownBase;
      }
    })
  );
  useInsertionEffect(() => {
    updateRouter(value);
  });
  return (0, import_react.createElement)(RouterCtx.Provider, {
    value,
    children
  });
};
var ParamsWrapper = (params, children) => (0, import_react.createElement)(ParamsCtx.Provider, {
  value: { params },
  children
});
var Route = ({ path, match, component, children }) => {
  const useRouteMatch = useRoute(path);
  const [matches, params] = match || useRouteMatch;
  if (!matches)
    return null;
  if (component)
    return ParamsWrapper(params, (0, import_react.createElement)(component, { params }));
  return ParamsWrapper(
    params,
    typeof children === "function" ? children(params) : children
  );
};
var Link = (0, import_react.forwardRef)((props, ref) => {
  const router = useRouter();
  const [, navigate2] = useLocationFromRouter(router);
  const { to, href = to, children, onClick } = props;
  const handleClick = useEvent((event) => {
    if (event.ctrlKey || event.metaKey || event.altKey || event.shiftKey || event.button !== 0)
      return;
    onClick && onClick(event);
    if (!event.defaultPrevented) {
      event.preventDefault();
      navigate2(to || href, props);
    }
  });
  const extraProps = {
    // handle nested routers and absolute paths
    href: href[0] === "~" ? href.slice(1) : router.base + href,
    onClick: handleClick,
    to: null,
    ref
  };
  const jsx = (0, import_react.isValidElement)(children) ? children : (0, import_react.createElement)("a", props);
  return (0, import_react.cloneElement)(jsx, extraProps);
});
var flattenChildren = (children) => {
  return Array.isArray(children) ? [].concat(
    ...children.map(
      (c) => c && c.type === import_react.Fragment ? flattenChildren(c.props.children) : flattenChildren(c)
    )
  ) : [children];
};
var Switch = ({ children, location: location2 }) => {
  const router = useRouter();
  const matcher = router.matcher;
  const [originalLocation] = useLocationFromRouter(router);
  for (const element of flattenChildren(children)) {
    let match = 0;
    if ((0, import_react.isValidElement)(element) && // we don't require an element to be of type Route,
    // but we do require it to contain a truthy `path` prop.
    // this allows to use different components that wrap Route
    // inside of a switch, for example <AnimatedRoute />.
    (match = element.props.path ? matcher(element.props.path, location2 || originalLocation) : [true, {}])[0])
      return (0, import_react.cloneElement)(element, { match });
  }
  return null;
};
var Redirect = (props) => {
  const { to, href = to } = props;
  const [, navigate2] = useLocation2();
  const redirect = useEvent(() => navigate2(to || href, props));
  useIsomorphicLayoutEffect(() => {
    redirect();
  }, []);
  return null;
};
var wouter_default = useRoute;
export {
  Link,
  Redirect,
  Route,
  Router,
  Switch,
  wouter_default as default,
  useLocation2 as useLocation,
  useParams,
  useRoute,
  useRouter
};
//# sourceMappingURL=wouter.js.map

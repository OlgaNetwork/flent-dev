{
  "version": 3,
  "sources": ["../../../.yarn/__virtual__/wouter-virtual-58e9ce29b6/5/Users/ted/.yarn/berry/cache/wouter-npm-2.12.1-05aa0e4598-10c0.zip/node_modules/wouter/matcher.js"],
  "sourcesContent": ["// creates a matcher function\nexport default function makeMatcher(makeRegexpFn = pathToRegexp) {\n  let cache = {};\n\n  // obtains a cached regexp version of the pattern\n  const getRegexp = (pattern) =>\n    cache[pattern] || (cache[pattern] = makeRegexpFn(pattern));\n\n  return (pattern, path) => {\n    const { regexp, keys } = getRegexp(pattern || \"\");\n    const out = regexp.exec(path);\n\n    if (!out) return [false, null];\n\n    // formats an object with matched params\n    const params = keys.reduce((params, key, i) => {\n      params[key.name] = out[i + 1];\n      return params;\n    }, {});\n\n    return [true, params];\n  };\n}\n\n// escapes a regexp string (borrowed from path-to-regexp sources)\n// https://github.com/pillarjs/path-to-regexp/blob/v3.0.0/index.js#L202\nconst escapeRx = (str) => str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n\n// returns a segment representation in RegExp based on flags\n// adapted and simplified version from path-to-regexp sources\nconst rxForSegment = (repeat, optional, prefix) => {\n  let capture = repeat ? \"((?:[^\\\\/]+?)(?:\\\\/(?:[^\\\\/]+?))*)\" : \"([^\\\\/]+?)\";\n  if (optional && prefix) capture = \"(?:\\\\/\" + capture + \")\";\n  return capture + (optional ? \"?\" : \"\");\n};\n\nconst pathToRegexp = (pattern) => {\n  const groupRx = /:([A-Za-z0-9_]+)([?+*]?)/g;\n\n  let match = null,\n    lastIndex = 0,\n    keys = [],\n    result = \"\";\n\n  while ((match = groupRx.exec(pattern)) !== null) {\n    const [_, segment, mod] = match;\n\n    // :foo  [1]      (  )\n    // :foo? [0 - 1]  ( o)\n    // :foo+ [1 - ∞]  (r )\n    // :foo* [0 - ∞]  (ro)\n    const repeat = mod === \"+\" || mod === \"*\";\n    const optional = mod === \"?\" || mod === \"*\";\n    const prefix = optional && pattern[match.index - 1] === \"/\" ? 1 : 0;\n\n    const prev = pattern.substring(lastIndex, match.index - prefix);\n\n    keys.push({ name: segment });\n    lastIndex = groupRx.lastIndex;\n\n    result += escapeRx(prev) + rxForSegment(repeat, optional, prefix);\n  }\n\n  result += escapeRx(pattern.substring(lastIndex));\n  return { keys, regexp: new RegExp(\"^\" + result + \"(?:\\\\/)?$\", \"i\") };\n};\n"],
  "mappings": ";AACe,SAAR,YAA6B,eAAe,cAAc;AAC/D,MAAI,QAAQ,CAAC;AAGb,QAAM,YAAY,CAAC,YACjB,MAAM,OAAO,MAAM,MAAM,OAAO,IAAI,aAAa,OAAO;AAE1D,SAAO,CAAC,SAAS,SAAS;AACxB,UAAM,EAAE,QAAQ,KAAK,IAAI,UAAU,WAAW,EAAE;AAChD,UAAM,MAAM,OAAO,KAAK,IAAI;AAE5B,QAAI,CAAC;AAAK,aAAO,CAAC,OAAO,IAAI;AAG7B,UAAM,SAAS,KAAK,OAAO,CAACA,SAAQ,KAAK,MAAM;AAC7C,MAAAA,QAAO,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AAC5B,aAAOA;AAAA,IACT,GAAG,CAAC,CAAC;AAEL,WAAO,CAAC,MAAM,MAAM;AAAA,EACtB;AACF;AAIA,IAAM,WAAW,CAAC,QAAQ,IAAI,QAAQ,6BAA6B,MAAM;AAIzE,IAAM,eAAe,CAAC,QAAQ,UAAU,WAAW;AACjD,MAAI,UAAU,SAAS,uCAAuC;AAC9D,MAAI,YAAY;AAAQ,cAAU,WAAW,UAAU;AACvD,SAAO,WAAW,WAAW,MAAM;AACrC;AAEA,IAAM,eAAe,CAAC,YAAY;AAChC,QAAM,UAAU;AAEhB,MAAI,QAAQ,MACV,YAAY,GACZ,OAAO,CAAC,GACR,SAAS;AAEX,UAAQ,QAAQ,QAAQ,KAAK,OAAO,OAAO,MAAM;AAC/C,UAAM,CAAC,GAAG,SAAS,GAAG,IAAI;AAM1B,UAAM,SAAS,QAAQ,OAAO,QAAQ;AACtC,UAAM,WAAW,QAAQ,OAAO,QAAQ;AACxC,UAAM,SAAS,YAAY,QAAQ,MAAM,QAAQ,CAAC,MAAM,MAAM,IAAI;AAElE,UAAM,OAAO,QAAQ,UAAU,WAAW,MAAM,QAAQ,MAAM;AAE9D,SAAK,KAAK,EAAE,MAAM,QAAQ,CAAC;AAC3B,gBAAY,QAAQ;AAEpB,cAAU,SAAS,IAAI,IAAI,aAAa,QAAQ,UAAU,MAAM;AAAA,EAClE;AAEA,YAAU,SAAS,QAAQ,UAAU,SAAS,CAAC;AAC/C,SAAO,EAAE,MAAM,QAAQ,IAAI,OAAO,MAAM,SAAS,aAAa,GAAG,EAAE;AACrE;",
  "names": ["params"]
}

import {
  inlineNodeParser
} from "./chunk-SBGFX42O.js";
import {
  domSerializationHelpers
} from "./chunk-HNOPRNJR.js";
import "./chunk-F3Z2TPKG.js";
import "./chunk-ZRMAPHIN.js";
import "./chunk-NVKSN2QT.js";
import "./chunk-AUZ3RYOM.js";

// .yarn/__virtual__/@bangle.dev-wiki-link-virtual-e861cdee89/5/Users/ted/.yarn/berry/cache/@bangle.dev-wiki-link-npm-0.32.0-be6a285171-10c0.zip/node_modules/@bangle.dev/wiki-link/dist/index.js
var name = "wikiLink";
var spec = specFactory;
function specFactory() {
  const { toDOM, parseDOM } = domSerializationHelpers(name, {
    tag: "span",
    parsingPriority: 52
  });
  return {
    type: "node",
    name,
    schema: {
      attrs: {
        path: {
          default: null
        },
        title: {
          default: null
        }
      },
      inline: true,
      group: "inline",
      selectable: false,
      draggable: true,
      toDOM,
      parseDOM
    },
    markdown: {
      toMarkdown: (state, node) => {
        state.text("[[", false);
        const { path, title } = node.attrs;
        let content = path;
        if (title && title !== path) {
          content += "|" + title;
        }
        state.text(content, false);
        state.text("]]", false);
      },
      parseMarkdown: {
        wiki_link: {
          block: name,
          getAttrs: (tok) => {
            if (typeof tok.payload === "string") {
              let [path, title] = tok.payload.split("|");
              return { path, title };
            }
            return null;
          },
          noCloseToken: true
        }
      }
    }
  };
}
var wikiLink = Object.freeze({
  __proto__: null,
  spec
});
function wikiLinkMarkdownItPlugin(md) {
  inlineNodeParser(md, {
    tokenName: "wiki_link",
    regex: /\[\[([^\]\[]+)\]\]/g,
    getTokenDetails: (match) => {
      return { payload: match.slice(2, -2), markup: match.slice(2, -2) };
    }
  });
}
export {
  wikiLink,
  wikiLinkMarkdownItPlugin
};
//# sourceMappingURL=@bangle__dev_wiki-link.js.map
